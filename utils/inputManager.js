const readline = require('readline');

/**
 * Gerenciador de entrada do usu√°rio via terminal
 */
class InputManager {
    constructor() {
        this.rl = null;
    }

    /**
     * Cria interface readline
     */
    createInterface() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }

    /**
     * Fecha interface readline
     */
    closeInterface() {
        if (this.rl) {
            this.rl.close();
            this.rl = null;
        }
    }

    /**
     * Pergunta ao usu√°rio e retorna resposta
     * @param {string} question - Pergunta a ser feita
     * @returns {Promise<string>} Resposta do usu√°rio
     */
    async question(question) {
        if (!this.rl) {
            this.createInterface();
        }

        return new Promise((resolve) => {
            this.rl.question(question, (answer) => {
                resolve(answer.trim());
            });
        });
    }

    /**
     * Pergunta m√©todo de conex√£o preferido
     * @returns {Promise<string>} 'qr' ou 'code'
     */
    async askConnectionMethod() {
        console.log('\nüîê M√âTODO DE CONEX√ÉO\n');
        console.log('Escolha como deseja conectar o bot:');
        console.log('1Ô∏è‚É£  QR Code (m√©todo tradicional)');
        console.log('2Ô∏è‚É£  C√≥digo de Pareamento (mais pr√°tico)');
        
        while (true) {
            const choice = await this.question('\nüí° Digite 1 para QR Code ou 2 para C√≥digo de Pareamento: ');
            
            if (choice === '1') {
                return 'qr';
            } else if (choice === '2') {
                return 'code';
            } else {
                console.log('‚ùå Op√ß√£o inv√°lida. Digite 1 ou 2.');
            }
        }
    }

    /**
     * Solicita n√∫mero de telefone para pareamento
     * @returns {Promise<string>} N√∫mero formatado
     */
    async askPhoneNumber() {
        console.log('\nüì± N√öMERO DO BOT\n');
        console.log('‚ö†Ô∏è  IMPORTANTE: Use o n√∫mero EXATO como est√° registrado no WhatsApp');
        console.log('üìã Formatos aceitos para Brasil:');
        console.log('   ‚Ä¢ 5511987654321 (completo com c√≥digo do pa√≠s)');
        console.log('   ‚Ä¢ 11987654321 (celular com 9¬∫ d√≠gito)');
        console.log('   ‚Ä¢ +5511987654321 (com + tamb√©m funciona)');
        console.log('\nüí° Dicas importantes:');
        console.log('   ‚Ä¢ Para celular: DEVE ter o 9¬∫ d√≠gito (11987654321)');
        console.log('   ‚Ä¢ Para fixo: sem o 9¬∫ d√≠gito (1187654321)');
        console.log('   ‚Ä¢ Verifique se o n√∫mero est√° ativo no WhatsApp');
        
        while (true) {
            const phoneNumber = await this.question('\nüìû Digite o n√∫mero EXATO do WhatsApp: ');
            
            try {
                if (this.validatePhoneNumber(phoneNumber)) {
                    return this.formatPhoneNumber(phoneNumber);
                }
            } catch (error) {
                console.log(`‚ùå Erro: ${error.message}`);
            }
            
            console.log('\n‚ùå N√∫mero inv√°lido ou formato incorreto');
            console.log('üí° Exemplos corretos:');
            console.log('   ‚Ä¢ 11987654321 (celular)');
            console.log('   ‚Ä¢ 5511987654321 (completo)');
            console.log('   ‚Ä¢ +5511987654321 (com +)');
            console.log('\nüîÑ Tente novamente...');
        }
    }

    /**
     * Valida formato do n√∫mero de telefone brasileiro
     * @param {string} phone - N√∫mero a ser validado
     * @returns {boolean} Se √© v√°lido
     */
    validatePhoneNumber(phone) {
        // Remove espa√ßos e caracteres especiais
        const cleanPhone = phone.replace(/[\s\-\(\)\+]/g, '');
        
        console.log(`üîç Validando n√∫mero: ${phone} -> ${cleanPhone}`);
        
        // Verifica se cont√©m apenas n√∫meros
        if (!/^\d+$/.test(cleanPhone)) {
            console.log('‚ùå N√∫mero cont√©m caracteres inv√°lidos');
            return false;
        }
        
        // Verifica formatos brasileiros v√°lidos
        const validFormats = [
            /^55\d{2}9\d{8}$/, // 5511987654321 (formato completo com 9)
            /^55\d{2}[6-9]\d{7}$/, // 5511987654321 (fixo)
            /^\d{2}9\d{8}$/, // 11987654321 (celular com 9)
            /^\d{2}[6-9]\d{7}$/, // 1187654321 (fixo local)
        ];
        
        const isValid = validFormats.some(regex => regex.test(cleanPhone));
        
        if (isValid) {
            console.log('‚úÖ N√∫mero v√°lido');
        } else {
            console.log('‚ùå N√∫mero n√£o atende aos formatos brasileiros v√°lidos');
            console.log('Formatos aceitos:');
            console.log('- 5511987654321 (completo)');
            console.log('- 11987654321 (celular)');
            console.log('- 1187654321 (fixo)');
        }
        
        return isValid;
    }

    /**
     * Formata n√∫mero de telefone para o padr√£o do WhatsApp Baileys
     * @param {string} phone - N√∫mero a ser formatado
     * @returns {string} N√∫mero formatado para Baileys
     */
    formatPhoneNumber(phone) {
        // Remove tudo exceto n√∫meros
        let cleanPhone = phone.replace(/[^\d]/g, '');
        
        console.log(`üîç N√∫mero original: ${phone}`);
        console.log(`üîç N√∫mero limpo: ${cleanPhone}`);
        
        // Se n√£o come√ßar com c√≥digo do pa√≠s, assume Brasil (55)
        if (!cleanPhone.startsWith('55')) {
            if (cleanPhone.length === 11) {
                // N√∫mero brasileiro com 11 d√≠gitos (11987654321)
                cleanPhone = '55' + cleanPhone;
            } else if (cleanPhone.length === 10) {
                // N√∫mero brasileiro com 10 d√≠gitos (1187654321) - adiciona 9
                cleanPhone = '55' + cleanPhone.substring(0, 2) + '9' + cleanPhone.substring(2);
            }
        }
        
        // Valida se tem pelo menos 12 d√≠gitos (pa√≠s + ddd + n√∫mero)
        if (cleanPhone.length < 12) {
            throw new Error(`N√∫mero muito curto: ${cleanPhone}. Precisa ter pelo menos 12 d√≠gitos.`);
        }
        
        console.log(`üîç N√∫mero final formatado: ${cleanPhone}`);
        return cleanPhone;
    }

    /**
     * Mostra loading enquanto aguarda c√≥digo
     */
    showPairingWait() {
        console.log('\n‚è≥ AGUARDANDO C√ìDIGO DE PAREAMENTO...\n');
        console.log('üì± Verifique seu WhatsApp!');
        console.log('üí¨ Um c√≥digo de 8 d√≠gitos ser√° enviado para voc√™.');
        console.log('üîÑ Aguarde alguns segundos...\n');
    }

    /**
     * Mostra sucesso do pareamento
     * @param {string} phoneNumber - N√∫mero que foi pareado
     */
    showPairingSuccess(phoneNumber) {
        console.log('‚úÖ C√ìDIGO DE PAREAMENTO ENVIADO!\n');
        console.log(`üì± N√∫mero: +${phoneNumber}`);
        console.log('üí¨ Verifique suas mensagens do WhatsApp');
        console.log('üî¢ Digite o c√≥digo de 8 d√≠gitos que voc√™ recebeu');
        console.log('‚è∞ O c√≥digo expira em alguns minutos\n');
    }

    /**
     * Mostra erro de pareamento
     * @param {string} error - Mensagem de erro
     */
    showPairingError(error) {
        console.log('‚ùå ERRO NO PAREAMENTO\n');
        console.log(`üö´ ${error}`);
        console.log('\nüí° Dicas:');
        console.log('‚Ä¢ Verifique se o n√∫mero est√° correto');
        console.log('‚Ä¢ Certifique-se que o WhatsApp est√° instalado');
        console.log('‚Ä¢ Tente novamente em alguns minutos\n');
    }
}

module.exports = InputManager;