const readline = require('readline');

/**
 * Gerenciador de entrada do usu√°rio via terminal
 */
class InputManager {
    constructor() {
        this.rl = null;
    }

    /**
     * Cria interface readline
     */
    createInterface() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }

    /**
     * Fecha interface readline
     */
    closeInterface() {
        if (this.rl) {
            this.rl.close();
            this.rl = null;
        }
    }

    /**
     * Pergunta ao usu√°rio e retorna resposta
     * @param {string} question - Pergunta a ser feita
     * @returns {Promise<string>} Resposta do usu√°rio
     */
    async question(question) {
        if (!this.rl) {
            this.createInterface();
        }

        return new Promise((resolve) => {
            this.rl.question(question, (answer) => {
                resolve(answer.trim());
            });
        });
    }

    /**
     * Pergunta m√©todo de conex√£o preferido
     * @returns {Promise<string>} 'qr' ou 'code'
     */
    async askConnectionMethod() {
        console.log('\nüîê M√âTODO DE CONEX√ÉO\n');
        console.log('Escolha como deseja conectar o bot:');
        console.log('1Ô∏è‚É£  QR Code (m√©todo tradicional)');
        console.log('2Ô∏è‚É£  C√≥digo de Pareamento (mais pr√°tico)');
        
        while (true) {
            const choice = await this.question('\nüí° Digite 1 para QR Code ou 2 para C√≥digo de Pareamento: ');
            
            if (choice === '1') {
                return 'qr';
            } else if (choice === '2') {
                return 'code';
            } else {
                console.log('‚ùå Op√ß√£o inv√°lida. Digite 1 ou 2.');
            }
        }
    }

    /**
     * Solicita n√∫mero de telefone para pareamento
     * @returns {Promise<string>} N√∫mero formatado
     */
    async askPhoneNumber() {
        console.log('\nüì± N√öMERO DO BOT\n');
        console.log('Digite o n√∫mero que ser√° usado como bot.');
        console.log('üìã Formato aceito: +5511999999999 ou 5511999999999');
        console.log('üåç Inclua o c√≥digo do pa√≠s (Brasil: +55)');
        
        while (true) {
            const phoneNumber = await this.question('\nüìû Digite o n√∫mero do WhatsApp: ');
            
            if (this.validatePhoneNumber(phoneNumber)) {
                return this.formatPhoneNumber(phoneNumber);
            } else {
                console.log('‚ùå N√∫mero inv√°lido. Use o formato: +5511999999999');
                console.log('üí° Exemplo: +5511987654321');
            }
        }
    }

    /**
     * Valida formato do n√∫mero de telefone
     * @param {string} phone - N√∫mero a ser validado
     * @returns {boolean} Se √© v√°lido
     */
    validatePhoneNumber(phone) {
        // Remove espa√ßos e caracteres especiais
        const cleanPhone = phone.replace(/[\s\-\(\)]/g, '');
        
        // Verifica se tem pelo menos 10 d√≠gitos (c√≥digo pa√≠s + n√∫mero)
        // e se cont√©m apenas n√∫meros e opcionalmente +
        const phoneRegex = /^\+?[1-9]\d{9,14}$/;
        
        return phoneRegex.test(cleanPhone);
    }

    /**
     * Formata n√∫mero de telefone para o padr√£o do WhatsApp
     * @param {string} phone - N√∫mero a ser formatado
     * @returns {string} N√∫mero formatado
     */
    formatPhoneNumber(phone) {
        // Remove tudo exceto n√∫meros
        let cleanPhone = phone.replace(/[^\d]/g, '');
        
        // Se n√£o come√ßar com c√≥digo do pa√≠s, assume Brasil (55)
        if (!cleanPhone.startsWith('55') && cleanPhone.length === 11) {
            cleanPhone = '55' + cleanPhone;
        }
        
        // Remove o + se existir e readiciona
        return cleanPhone;
    }

    /**
     * Mostra loading enquanto aguarda c√≥digo
     */
    showPairingWait() {
        console.log('\n‚è≥ AGUARDANDO C√ìDIGO DE PAREAMENTO...\n');
        console.log('üì± Verifique seu WhatsApp!');
        console.log('üí¨ Um c√≥digo de 8 d√≠gitos ser√° enviado para voc√™.');
        console.log('üîÑ Aguarde alguns segundos...\n');
    }

    /**
     * Mostra sucesso do pareamento
     * @param {string} phoneNumber - N√∫mero que foi pareado
     */
    showPairingSuccess(phoneNumber) {
        console.log('‚úÖ C√ìDIGO DE PAREAMENTO ENVIADO!\n');
        console.log(`üì± N√∫mero: +${phoneNumber}`);
        console.log('üí¨ Verifique suas mensagens do WhatsApp');
        console.log('üî¢ Digite o c√≥digo de 8 d√≠gitos que voc√™ recebeu');
        console.log('‚è∞ O c√≥digo expira em alguns minutos\n');
    }

    /**
     * Mostra erro de pareamento
     * @param {string} error - Mensagem de erro
     */
    showPairingError(error) {
        console.log('‚ùå ERRO NO PAREAMENTO\n');
        console.log(`üö´ ${error}`);
        console.log('\nüí° Dicas:');
        console.log('‚Ä¢ Verifique se o n√∫mero est√° correto');
        console.log('‚Ä¢ Certifique-se que o WhatsApp est√° instalado');
        console.log('‚Ä¢ Tente novamente em alguns minutos\n');
    }
}

module.exports = InputManager;