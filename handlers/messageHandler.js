const { generateWAMessageFromContent, proto } = require('@whiskeysockets/baileys');
const VideoHandler = require('./videoHandler');

/**
 * Handler para processar mensagens recebidas e responder com diferentes tipos de bot√µes interativos
 */
class MessageHandler {
    constructor(sock) {
        this.sock = sock;
        this.videoHandler = new VideoHandler(sock);
        this.botInfo = {
            name: "Bot de Atendimento WhatsApp",
            version: "2.0.0",
            description: "Bot automatizado para atendimento ao cliente com suporte a v√≠deos"
        };
    }

    /**
     * Processa mensagens recebidas
     * @param {Object} m - Objeto da mensagem
     */
    async handleMessage(m) {
        try {
            const messageType = Object.keys(m.message)[0];
            const userNumber = m.key.remoteJid;
            
            console.log(`üì• Tipo de mensagem recebida: ${messageType} de ${userNumber}`);
            
            // Verifica se √© comando !uparvideo em v√≠deo
            if (messageType === 'videoMessage') {
                const caption = m.message.videoMessage?.caption || '';
                if (caption.toLowerCase().includes('!uparvideo')) {
                    await this.videoHandler.handleVideoUpload(m, userNumber);
                    return;
                }
            }
            
            // Verifica se √© resposta de bot√£o interativo
            if (messageType === 'buttonsResponseMessage') {
                console.log(`üîò Resposta de bot√£o detectada de ${userNumber}`);
                await this.handleButtonMessage(m);
                return;
            }
            
            // Verifica se √© uma mensagem de texto
            if (messageType === 'conversation' || messageType === 'extendedTextMessage') {
                const messageText = m.message.conversation || m.message.extendedTextMessage?.text || '';
                
                console.log(`üì© Mensagem recebida de ${userNumber}: ${messageText}`);
                
                // Verifica se usu√°rio est√° aguardando escolha de v√≠deo
                if (this.videoHandler.isAwaitingVideoPlacement(userNumber)) {
                    const userData = this.videoHandler.awaitingVideoPlacement.get(userNumber);
                    
                    // Se est√° aguardando nome de se√ß√£o personalizada
                    if (userData && userData.step === 'custom_name') {
                        await this.videoHandler.handleCustomSectionName(userNumber, messageText);
                        return;
                    }
                    
                    // Sen√£o, processa escolha de local
                    await this.videoHandler.handleVideoPlacement(userNumber, messageText.trim());
                    return;
                }

                // Verifica estados de gerenciamento
                const userState = this.videoHandler.getUserState(userNumber);
                if (userState) {
                    await this.handleUserStateMessage(userNumber, messageText, userState);
                    return;
                }
                
                // Verifica se √© comando de ativa√ß√£o
                if (this.isActivationCommand(messageText)) {
                    await this.sendWelcomeMenu(userNumber);
                    return;
                }

                // Verifica se √© comando !gerenciar
                if (messageText.toLowerCase().trim() === '!gerenciar') {
                    await this.sendStepManagementMenu(userNumber);
                    return;
                }

                // Comandos do sistema de gerenciamento
                if (messageText.toLowerCase().trim() === '!criar') {
                    await this.handleCreateStep(userNumber);
                    return;
                }

                if (messageText.toLowerCase().startsWith('!editar')) {
                    await this.handleEditStep(userNumber, messageText);
                    return;
                }

                if (messageText.toLowerCase().startsWith('!excluir')) {
                    await this.handleDeleteStep(userNumber, messageText);
                    return;
                }

                if (messageText.toLowerCase().startsWith('!legenda')) {
                    await this.handleEditCaption(userNumber, messageText);
                    return;
                }

                if (messageText.toLowerCase().trim() === '!listar') {
                    await this.handleListSteps(userNumber);
                    return;
                }

                // Verifica se √© comando !criarcondicional
                if (messageText.toLowerCase().startsWith('!criarcondicional')) {
                    const parts = messageText.split(' ');
                    if (parts.length >= 4) {
                        const stepId = parts[1];
                        const showAfter = parts[2];
                        const stepName = parts.slice(3).join(' ');
                        
                        this.videoHandler.addConditionalStep(stepId, showAfter, stepName);
                        
                        await this.sendTypingEffect(userNumber, 1500);
                        await this.sock.sendMessage(userNumber, {
                            text: `‚úÖ *Etapa condicional criada!*\n\nüìù **Nome:** ${stepName}\nüîó **Aparece ap√≥s:** ${showAfter}\nüÜî **ID:** ${stepId}\n\nüí° Agora envie um v√≠deo com "!uparvideo" e escolha esta etapa, ou use !gerenciar para configurar.`
                        });
                    } else {
                        await this.sock.sendMessage(userNumber, {
                            text: '‚ùå *Formato incorreto*\n\nüìã **Como usar:**\n!criarcondicional [id] [etapa-requisito] [nome]\n\nüí° **Exemplo:**\n!criarcondicional promocoes suporte Promo√ß√µes Especiais'
                        });
                    }
                    return;
                }
                
                // Verifica se √© resposta num√©rica (1, 2, etc.)
                if (this.isNumericResponse(messageText)) {
                    await this.handleNumericResponse(userNumber, messageText.trim());
                    return;
                }
            }
            
            // Verifica se √© resposta de bot√£o tradicional
            if (messageType === 'buttonsResponseMessage') {
                const buttonResponse = m.message.buttonsResponseMessage;
                const userNumber = m.key.remoteJid;
                
                console.log(`üîò Bot√£o clicado: ${buttonResponse.selectedButtonId}`);
                await this.handleButtonResponse(userNumber, buttonResponse.selectedButtonId);
            }

            // Verifica se √© resposta de lista interativa
            if (messageType === 'listResponseMessage') {
                const listResponse = m.message.listResponseMessage;
                const userNumber = m.key.remoteJid;
                
                console.log(`üìã Lista selecionada: ${listResponse.singleSelectReply.selectedRowId}`);
                await this.handleButtonResponse(userNumber, listResponse.singleSelectReply.selectedRowId);
            }

        } catch (error) {
            console.error('‚ùå Erro ao processar mensagem:', error);
        }
    }

    /**
     * Verifica se a mensagem √© um comando de ativa√ß√£o
     * @param {string} text - Texto da mensagem
     * @returns {boolean}
     */
    isActivationCommand(text) {
        const activationWords = ['oi', 'menu', 'OI', 'MENU', 'Oi', 'Menu'];
        return activationWords.includes(text.trim());
    }

    /**
     * Verifica se √© uma resposta num√©rica (1, 2, 3, 4, 5)
     * @param {string} text - Texto da mensagem
     * @returns {boolean}
     */
    isNumericResponse(text) {
        const numericResponses = ['1', '2', '3', '4', '5'];
        return numericResponses.includes(text.trim());
    }

    /**
     * Simula efeito de digita√ß√£o realista
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {number} duration - Dura√ß√£o em milissegundos
     */
    async sendTypingEffect(userNumber, duration = 2000) {
        try {
            await this.sock.sendPresenceUpdate('composing', userNumber);
            await new Promise(resolve => setTimeout(resolve, duration));
            await this.sock.sendPresenceUpdate('available', userNumber);
        } catch (error) {
            console.error('‚ùå Erro no efeito de digita√ß√£o:', error);
        }
    }

    /**
     * Envia v√≠deo se dispon√≠vel para a se√ß√£o
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {string} section - Se√ß√£o (welcome, suporte, info_bot)
     */
    async sendVideoIfAvailable(userNumber, section) {
        try {
            if (this.videoHandler.hasVideoForSection(section)) {
                const videoPath = this.videoHandler.getVideoForSection(section);
                const fs = require('fs');
                
                if (fs.existsSync(videoPath)) {
                    await this.sendTypingEffect(userNumber, 1500);
                    
                    // Obt√©m legenda personalizada ou usa padr√£o
                    const customCaption = this.videoHandler.videoConfig.captions?.[section] || `üé• *V√≠deo informativo*`;
                    
                    await this.sock.sendMessage(userNumber, {
                        video: fs.readFileSync(videoPath),
                        caption: customCaption
                    });
                    console.log(`üé• V√≠deo ${section} enviado para ${userNumber}`);
                    return true;
                }
            }
        } catch (error) {
            console.error(`‚ùå Erro ao enviar v√≠deo ${section}:`, error);
        }
        return false;
    }

    /**
     * Envia menu de boas-vindas - vers√£o simplificada que sempre funciona
     * @param {string} userNumber - N√∫mero do usu√°rio
     */
    async sendWelcomeMenu(userNumber) {
        try {
            // Efeito de digita√ß√£o realista
            await this.sendTypingEffect(userNumber, 2500);
            
            // Envia v√≠deo de boas-vindas se dispon√≠vel
            await this.sendVideoIfAvailable(userNumber, 'welcome');
            
            // Pequena pausa antes do menu
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // Vai direto para o menu numerado que sempre funciona
            await this.sendFallbackMenu(userNumber);
            console.log(`‚úÖ Menu numerado enviado para ${userNumber}`);
            
        } catch (error) {
            console.error('‚ùå Erro ao enviar menu:', error);
        }
    }

    /**
     * Envia menu fallback com emojis numerados (DIN√ÇMICO baseado no usu√°rio)
     * @param {string} userNumber - N√∫mero do usu√°rio
     */
    async sendFallbackMenu(userNumber) {
        try {
            // Efeito de digita√ß√£o antes do menu
            await this.sendTypingEffect(userNumber, 1800);
            
            // Obt√©m etapas dispon√≠veis para este usu√°rio
            const availableSteps = this.videoHandler.getAvailableStepsForUser(userNumber);
            const conditionalSteps = this.videoHandler.videoConfig.flow?.conditional || {};
            
            let menuOptions = '';
            let optionCount = 1;
            
            // Adiciona op√ß√µes baseadas nas etapas dispon√≠veis
            for (const stepId of availableSteps) {
                let stepName = '';
                let stepDescription = '';
                
                switch(stepId) {
                    case 'suporte':
                        stepName = 'Suporte üåê';
                        stepDescription = 'Falar com nosso suporte t√©cnico';
                        break;
                    case 'info_bot':
                        stepName = 'Informa√ß√µes Bot ü§ñ';
                        stepDescription = 'Conhecer mais sobre este bot';
                        break;
                    default:
                        // Etapa condicional personalizada
                        if (conditionalSteps[stepId]) {
                            stepName = `${conditionalSteps[stepId].name} ‚ú®`;
                            stepDescription = `Op√ß√£o especial desbloqueada!`;
                        }
                }
                
                if (stepName) {
                    menuOptions += `*${optionCount}Ô∏è‚É£ ${stepName}*\n${stepDescription}\n\n`;
                    optionCount++;
                }
            }
            
            const fallbackMessage = `üéâ *Ol√°! Bem-vindo ao nosso atendimento!*

Escolha uma das op√ß√µes digitando o n√∫mero correspondente:

${menuOptions}_Digite o n√∫mero para continuar_

---
üí° _Dica: Digite "menu" a qualquer momento para ver as op√ß√µes novamente_
üé• _Envie um v√≠deo com "!uparvideo" para adicionar v√≠deos ao bot_`;

            await this.sock.sendMessage(userNumber, { text: fallbackMessage });
            console.log(`‚úÖ Menu din√¢mico enviado para ${userNumber} (${availableSteps.length} op√ß√µes)`);

        } catch (error) {
            console.error('‚ùå Erro ao enviar menu fallback:', error);
        }
    }

    /**
     * Processa resposta num√©rica do usu√°rio (DIN√ÇMICA)
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {string} option - Op√ß√£o selecionada
     */
    async handleNumericResponse(userNumber, option) {
        try {
            // Obt√©m etapas dispon√≠veis para mapear o n√∫mero
            const availableSteps = this.videoHandler.getAvailableStepsForUser(userNumber);
            const optionIndex = parseInt(option) - 1;
            
            if (optionIndex < 0 || optionIndex >= availableSteps.length) {
                await this.sock.sendMessage(userNumber, {
                    text: `‚ùì Op√ß√£o inv√°lida. Digite "menu" para ver as op√ß√µes dispon√≠veis (1-${availableSteps.length}).`
                });
                return;
            }
            
            const selectedStepId = availableSteps[optionIndex];
            console.log(`üî¢ Usu√°rio ${userNumber} escolheu op√ß√£o ${option} (${selectedStepId})`);
            
            // Registra que o usu√°rio visitou esta etapa
            this.videoHandler.trackUserNavigation(userNumber, selectedStepId);
            
            await this.handleButtonResponse(userNumber, selectedStepId);

        } catch (error) {
            console.error('‚ùå Erro ao processar resposta num√©rica:', error);
        }
    }

    /**
     * Envia menu de gerenciamento de etapas
     * @param {string} userNumber - N√∫mero do usu√°rio
     */
    async sendStepManagementMenu(userNumber) {
        try {
            await this.sendTypingEffect(userNumber, 2000);
            
            // Carrega configura√ß√£o atual de v√≠deos
            const videoConfig = this.videoHandler.videoConfig;
            
            const menuMessage = `üîß *GERENCIADOR DE ETAPAS*

üìã *Etapas Dispon√≠veis:*

*1Ô∏è‚É£ Menu Principal (Boas-vindas)*
${videoConfig.welcome ? 'üé• Com v√≠deo' : 'üìù Apenas texto'}

*2Ô∏è‚É£ Se√ß√£o Suporte*
${videoConfig.suporte ? 'üé• Com v√≠deo' : 'üìù Apenas texto'}

*3Ô∏è‚É£ Informa√ß√µes do Bot*
${videoConfig.info_bot ? 'üé• Com v√≠deo' : 'üìù Sem conte√∫do'}

*4Ô∏è‚É£ Se√ß√µes Personalizadas*
${videoConfig.custom && videoConfig.custom.length > 0 ? `üìä ${videoConfig.custom.length} se√ß√£o(√µes)` : 'üÜï Nenhuma'}

---

*üìù COMANDOS DISPON√çVEIS:*
‚Ä¢ !editar [n√∫mero] - Editar etapa
‚Ä¢ !criar - Criar nova etapa
‚Ä¢ !excluir [n√∫mero] - Excluir etapa
‚Ä¢ !legenda [n√∫mero] - Editar legenda do v√≠deo
‚Ä¢ !listar - Ver detalhes de todas etapas

üí° *Exemplo:* !editar 3`;

            await this.sock.sendMessage(userNumber, { text: menuMessage });
            console.log(`‚úÖ Menu de gerenciamento enviado para ${userNumber}`);

        } catch (error) {
            console.error('‚ùå Erro ao enviar menu de gerenciamento:', error);
        }
    }

    /**
     * Processa resposta dos bot√µes e listas
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {string} buttonId - ID do bot√£o/op√ß√£o clicado
     */
    async handleButtonResponse(userNumber, buttonId) {
        try {
            // Efeito de digita√ß√£o realista antes da resposta
            await this.sendTypingEffect(userNumber, 2200);
            
            let responseMessage = '';

            switch (buttonId) {
                case 'suporte':
                    // Envia v√≠deo de suporte se dispon√≠vel
                    const sentSuporteVideo = await this.sendVideoIfAvailable(userNumber, 'suporte');
                    if (sentSuporteVideo) {
                        await new Promise(resolve => setTimeout(resolve, 1500));
                        await this.sendTypingEffect(userNumber, 1500);
                    }
                    
                    responseMessage = `üåê *Suporte ao Cliente*

Para falar com nosso suporte humano, clique no link abaixo:

üì± *wa.me/5599999999999*

üïí *Hor√°rio de atendimento:*
Segunda a Sexta: 08:00 √†s 18:00
S√°bado: 08:00 √†s 12:00

‚ö° Resposta em at√© 30 minutos!

---
üîÑ _Digite "menu" para voltar ao in√≠cio_`;
                    break;

                case 'info_bot':
                    // Envia v√≠deo primeiro se dispon√≠vel
                    await this.sendVideoIfAvailable(userNumber, 'info_bot');
                    
                    // Envia menu interativo com bot√µes
                    await this.sendBotInfoButtons(userNumber);
                    return; // N√£o envia mensagem de texto simples
                    break;

                default:
                    // Verifica se √© uma etapa condicional
                    const conditionalSteps = this.videoHandler.videoConfig.flow?.conditional || {};
                    if (conditionalSteps[buttonId]) {
                        // Envia v√≠deo da etapa condicional se dispon√≠vel
                        const sentConditionalVideo = await this.sendVideoIfAvailable(userNumber, buttonId);
                        if (sentConditionalVideo) {
                            return; // S√≥ envia o v√≠deo
                        } else {
                            responseMessage = `‚ú® *${conditionalSteps[buttonId].name}*\n\n‚ÑπÔ∏è Esta etapa especial est√° em configura√ß√£o.\n\nüîß Use o comando !gerenciar para adicionar conte√∫do.`;
                        }
                    } else {
                        responseMessage = '‚ùì Op√ß√£o n√£o reconhecida. Digite "menu" para ver as op√ß√µes dispon√≠veis.';
                    }
            }

            await this.sock.sendMessage(userNumber, { text: responseMessage });
            console.log(`‚úÖ Resposta enviada para ${userNumber}: ${buttonId}`);

        } catch (error) {
            console.error('‚ùå Erro ao processar resposta do bot√£o:', error);
        }
    }

    /**
     * Manipula cria√ß√£o de nova etapa
     * @param {string} userNumber - N√∫mero do usu√°rio
     */
    async handleCreateStep(userNumber) {
        try {
            await this.sendTypingEffect(userNumber, 1500);
            
            const createMessage = `üÜï *CRIAR NOVA ETAPA*

üìù **Escolha o tipo:**

**1Ô∏è‚É£ Etapa Normal**
Aparece sempre no menu principal

**2Ô∏è‚É£ Etapa Condicional** 
Aparece apenas ap√≥s visitar outra etapa

---
üí° **Digite 1 ou 2 para continuar**`;

            await this.sock.sendMessage(userNumber, { text: createMessage });
            
            // Marca usu√°rio como aguardando tipo de etapa
            this.videoHandler.setUserState(userNumber, 'awaiting_step_type');
            
        } catch (error) {
            console.error('‚ùå Erro ao processar !criar:', error);
        }
    }

    /**
     * Manipula edi√ß√£o de etapa
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {string} messageText - Comando completo
     */
    async handleEditStep(userNumber, messageText) {
        try {
            const parts = messageText.split(' ');
            if (parts.length < 2) {
                await this.sock.sendMessage(userNumber, {
                    text: '‚ùå **Formato incorreto**\n\nüìã **Como usar:**\n!editar [n√∫mero]\n\nüí° **Exemplo:** !editar 2'
                });
                return;
            }

            const stepNumber = parseInt(parts[1]);
            const availableSteps = this.videoHandler.getAvailableStepsForUser(userNumber);
            
            if (stepNumber < 1 || stepNumber > availableSteps.length) {
                await this.sock.sendMessage(userNumber, {
                    text: `‚ùå **Etapa n√£o encontrada**\n\nEtapas dispon√≠veis: 1-${availableSteps.length}\n\nüìú Use !listar para ver todas as etapas`
                });
                return;
            }

            const stepId = availableSteps[stepNumber - 1];
            await this.sendTypingEffect(userNumber, 1500);
            
            const editMessage = `‚úèÔ∏è **EDITAR ETAPA ${stepNumber}**\n\nüÜî **ID:** ${stepId}\n\n**O que deseja editar?**\n\n1Ô∏è‚É£ Nome da etapa\n2Ô∏è‚É£ Legenda do v√≠deo\n3Ô∏è‚É£ Substituir v√≠deo\n4Ô∏è‚É£ Remover v√≠deo\n\n---\nüí° Digite 1, 2, 3 ou 4`;

            await this.sock.sendMessage(userNumber, { text: editMessage });
            
            // Armazena contexto de edi√ß√£o
            this.videoHandler.setUserState(userNumber, 'editing_step', { stepId, stepNumber });
            
        } catch (error) {
            console.error('‚ùå Erro ao processar !editar:', error);
        }
    }

    /**
     * Manipula exclus√£o de etapa
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {string} messageText - Comando completo
     */
    async handleDeleteStep(userNumber, messageText) {
        try {
            const parts = messageText.split(' ');
            if (parts.length < 2) {
                await this.sock.sendMessage(userNumber, {
                    text: '‚ùå **Formato incorreto**\n\nüìã **Como usar:**\n!excluir [n√∫mero]\n\nüí° **Exemplo:** !excluir 3'
                });
                return;
            }

            const stepNumber = parseInt(parts[1]);
            const availableSteps = this.videoHandler.getAvailableStepsForUser(userNumber);
            
            if (stepNumber < 1 || stepNumber > availableSteps.length) {
                await this.sock.sendMessage(userNumber, {
                    text: `‚ùå **Etapa n√£o encontrada**\n\nEtapas dispon√≠veis: 1-${availableSteps.length}\n\nüìú Use !listar para ver todas as etapas`
                });
                return;
            }

            const stepId = availableSteps[stepNumber - 1];
            
            // N√£o permite excluir etapas principais
            if (['suporte', 'info_bot', 'welcome'].includes(stepId)) {
                await this.sock.sendMessage(userNumber, {
                    text: `‚ö†Ô∏è **N√£o √© poss√≠vel excluir etapas do sistema**\n\nEtapas protegidas: Suporte, Info Bot, Welcome\n\nüí° Use !editar para modific√°-las`
                });
                return;
            }

            await this.sendTypingEffect(userNumber, 1500);
            
            const confirmMessage = `üóëÔ∏è **CONFIRMAR EXCLUS√ÉO**\n\nüìù **Etapa:** ${stepId}\n\n‚ö†Ô∏è **Esta a√ß√£o n√£o pode ser desfeita!**\n\n**Digite 'CONFIRMAR' para excluir ou qualquer outra coisa para cancelar**`;

            await this.sock.sendMessage(userNumber, { text: confirmMessage });
            
            // Armazena contexto de exclus√£o
            this.videoHandler.setUserState(userNumber, 'confirming_delete', { stepId, stepNumber });
            
        } catch (error) {
            console.error('‚ùå Erro ao processar !excluir:', error);
        }
    }

    /**
     * Manipula edi√ß√£o de legenda
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {string} messageText - Comando completo
     */
    async handleEditCaption(userNumber, messageText) {
        try {
            const parts = messageText.split(' ');
            if (parts.length < 2) {
                await this.sock.sendMessage(userNumber, {
                    text: '‚ùå **Formato incorreto**\n\nüìã **Como usar:**\n!legenda [n√∫mero]\n\nüí° **Exemplo:** !legenda 1'
                });
                return;
            }

            const stepNumber = parseInt(parts[1]);
            const availableSteps = this.videoHandler.getAvailableStepsForUser(userNumber);
            
            if (stepNumber < 1 || stepNumber > availableSteps.length) {
                await this.sock.sendMessage(userNumber, {
                    text: `‚ùå **Etapa n√£o encontrada**\n\nEtapas dispon√≠veis: 1-${availableSteps.length}\n\nüìú Use !listar para ver todas as etapas`
                });
                return;
            }

            const stepId = availableSteps[stepNumber - 1];
            const currentCaption = this.videoHandler.videoConfig.captions?.[stepId] || 'Sem legenda';
            
            await this.sendTypingEffect(userNumber, 1500);
            
            const captionMessage = `üé¨ **EDITAR LEGENDA - Etapa ${stepNumber}**\n\nüÜî **ID:** ${stepId}\nüìù **Legenda atual:**\n${currentCaption}\n\n**Digite a nova legenda:**`;

            await this.sock.sendMessage(userNumber, { text: captionMessage });
            
            // Armazena contexto de edi√ß√£o de legenda
            this.videoHandler.setUserState(userNumber, 'editing_caption', { stepId, stepNumber });
            
        } catch (error) {
            console.error('‚ùå Erro ao processar !legenda:', error);
        }
    }

    /**
     * Lista todas as etapas
     * @param {string} userNumber - N√∫mero do usu√°rio
     */
    async handleListSteps(userNumber) {
        try {
            await this.sendTypingEffect(userNumber, 1500);
            
            const availableSteps = this.videoHandler.getAvailableStepsForUser(userNumber);
            const conditionalSteps = this.videoHandler.videoConfig.flow?.conditional || {};
            
            let listMessage = 'üìú **LISTA DE ETAPAS**\n\n';
            
            for (let i = 0; i < availableSteps.length; i++) {
                const stepId = availableSteps[i];
                const stepNumber = i + 1;
                
                let stepName = '';
                let stepType = '';
                
                switch(stepId) {
                    case 'suporte':
                        stepName = 'Suporte';
                        stepType = 'üîß Sistema';
                        break;
                    case 'info_bot':
                        stepName = 'Informa√ß√µes Bot';
                        stepType = 'üîß Sistema';
                        break;
                    case 'welcome':
                        stepName = 'Boas-vindas';
                        stepType = 'üîß Sistema';
                        break;
                    default:
                        if (conditionalSteps[stepId]) {
                            stepName = conditionalSteps[stepId].name;
                            stepType = `‚ú® Condicional (ap√≥s ${conditionalSteps[stepId].showAfter})`;
                        } else {
                            stepName = stepId;
                            stepType = 'üìù Personalizada';
                        }
                }
                
                const hasVideo = this.videoHandler.hasVideoForSection(stepId) ? 'üé•' : '‚ùå';
                const caption = this.videoHandler.videoConfig.captions?.[stepId] || 'Sem legenda';
                
                listMessage += `**${stepNumber}Ô∏è‚É£ ${stepName}**\n`;
                listMessage += `üì± ${stepType}\n`;
                listMessage += `üé¨ V√≠deo: ${hasVideo}\n`;
                listMessage += `üí¨ Legenda: ${caption}\n\n`;
            }
            
            listMessage += '---\nüí° Use !editar, !legenda ou !excluir com o n√∫mero da etapa';
            
            await this.sock.sendMessage(userNumber, { text: listMessage });
            
        } catch (error) {
            console.error('‚ùå Erro ao processar !listar:', error);
        }
    }

    /**
     * Processa mensagens baseadas no estado do usu√°rio
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {string} messageText - Texto da mensagem
     * @param {object} userState - Estado atual do usu√°rio
     */
    async handleUserStateMessage(userNumber, messageText, userState) {
        try {
            switch (userState.state) {
                case 'awaiting_step_type':
                    await this.handleStepTypeResponse(userNumber, messageText);
                    break;
                    
                case 'editing_step':
                    await this.handleEditStepResponse(userNumber, messageText, userState.data);
                    break;
                    
                case 'editing_caption':
                    await this.handleEditCaptionResponse(userNumber, messageText, userState.data);
                    break;
                    
                case 'confirming_delete':
                    await this.handleDeleteConfirmation(userNumber, messageText, userState.data);
                    break;
                    
                default:
                    // Estado n√£o reconhecido, limpa e processa normalmente
                    this.videoHandler.clearUserState(userNumber);
            }
        } catch (error) {
            console.error('‚ùå Erro ao processar estado do usu√°rio:', error);
            this.videoHandler.clearUserState(userNumber);
        }
    }

    /**
     * Processa resposta de tipo de etapa
     */
    async handleStepTypeResponse(userNumber, messageText) {
        const option = messageText.trim();
        
        if (option === '1') {
            // Etapa normal - ainda n√£o implementado
            await this.sock.sendMessage(userNumber, {
                text: 'üöß **Em desenvolvimento**\n\nEtapas normais ser√£o implementadas em breve.\n\nüí° Use !criarcondicional para criar etapas condicionais.'
            });
        } else if (option === '2') {
            // Etapa condicional
            await this.sock.sendMessage(userNumber, {
                text: '‚ú® **Criar Etapa Condicional**\n\nüìã **Use o comando:**\n!criarcondicional [id] [etapa-requisito] [nome]\n\nüí° **Exemplo:**\n!criarcondicional promocoes suporte Promo√ß√µes Especiais'
            });
        } else {
            await this.sock.sendMessage(userNumber, {
                text: '‚ùå **Op√ß√£o inv√°lida**\n\nDigite 1 ou 2 para escolher o tipo de etapa.'
            });
            return;
        }
        
        this.videoHandler.clearUserState(userNumber);
    }

    /**
     * Processa resposta de edi√ß√£o de etapa
     */
    async handleEditStepResponse(userNumber, messageText, stepData) {
        const option = messageText.trim();
        
        switch (option) {
            case '1':
                await this.sock.sendMessage(userNumber, {
                    text: 'üöß **Edi√ß√£o de nome em desenvolvimento**\n\nEssa funcionalidade ser√° implementada em breve.'
                });
                break;
            case '2':
                // Redireciona para edi√ß√£o de legenda
                await this.handleEditCaption(userNumber, `!legenda ${stepData.stepNumber}`);
                return; // N√£o limpa estado aqui
            case '3':
                await this.sock.sendMessage(userNumber, {
                    text: 'üé• **Substituir v√≠deo**\n\nEnvie um novo v√≠deo com "!uparvideo" e escolha esta etapa para substituir.'
                });
                break;
            case '4':
                await this.sock.sendMessage(userNumber, {
                    text: 'üöß **Remo√ß√£o de v√≠deo em desenvolvimento**\n\nEssa funcionalidade ser√° implementada em breve.'
                });
                break;
            default:
                await this.sock.sendMessage(userNumber, {
                    text: '‚ùå **Op√ß√£o inv√°lida**\n\nDigite 1, 2, 3 ou 4 para escolher a a√ß√£o.'
                });
                return;
        }
        
        this.videoHandler.clearUserState(userNumber);
    }

    /**
     * Processa resposta de edi√ß√£o de legenda
     */
    async handleEditCaptionResponse(userNumber, messageText, stepData) {
        const newCaption = messageText.trim();
        
        if (newCaption.length === 0) {
            await this.sock.sendMessage(userNumber, {
                text: '‚ùå **Legenda n√£o pode estar vazia**\n\nDigite uma nova legenda.'
            });
            return;
        }
        
        // Atualiza a legenda
        if (!this.videoHandler.videoConfig.captions) {
            this.videoHandler.videoConfig.captions = {};
        }
        
        this.videoHandler.videoConfig.captions[stepData.stepId] = newCaption;
        this.videoHandler.saveVideoConfig();
        
        await this.sendTypingEffect(userNumber, 1500);
        await this.sock.sendMessage(userNumber, {
            text: `‚úÖ **Legenda atualizada!**\n\nüÜî **Etapa:** ${stepData.stepId}\nüìù **Nova legenda:**\n${newCaption}`
        });
        
        this.videoHandler.clearUserState(userNumber);
    }

    /**
     * Processa confirma√ß√£o de exclus√£o
     */
    async handleDeleteConfirmation(userNumber, messageText, stepData) {
        const response = messageText.trim().toLowerCase();
        
        if (response === 'confirmar') {
            // Remove etapa condicional
            const conditionalSteps = this.videoHandler.videoConfig.flow?.conditional || {};
            
            if (conditionalSteps[stepData.stepId]) {
                delete conditionalSteps[stepData.stepId];
                
                // Remove legenda se existir
                if (this.videoHandler.videoConfig.captions && this.videoHandler.videoConfig.captions[stepData.stepId]) {
                    delete this.videoHandler.videoConfig.captions[stepData.stepId];
                }
                
                this.videoHandler.saveVideoConfig();
                
                await this.sendTypingEffect(userNumber, 1500);
                await this.sock.sendMessage(userNumber, {
                    text: `‚úÖ **Etapa exclu√≠da com sucesso!**\n\nüóëÔ∏è **Etapa removida:** ${stepData.stepId}\n\nüí° A etapa n√£o aparecer√° mais nos menus.`
                });
            } else {
                await this.sock.sendMessage(userNumber, {
                    text: '‚ùå **Etapa n√£o encontrada ou n√£o pode ser exclu√≠da.**'
                });
            }
        } else {
            await this.sock.sendMessage(userNumber, {
                text: '‚ùå **Exclus√£o cancelada**\n\nA etapa foi mantida.'
            });
        }
        
        this.videoHandler.clearUserState(userNumber);
    }

    /**
     * Envia menu de informa√ß√µes do bot com bot√µes interativos
     * @param {string} userNumber - N√∫mero do usu√°rio
     */
    async sendBotInfoButtons(userNumber) {
        try {
            console.log(`üîò Tentando enviar bot√µes para ${userNumber}...`);
            await this.sendTypingEffect(userNumber, 1500);

            const buttons = [
                {
                    buttonId: 'bot_versao', 
                    buttonText: {displayText: 'ü§ñ Vers√£o do Bot'}, 
                    type: 1
                },
                {
                    buttonId: 'bot_recursos', 
                    buttonText: {displayText: '‚öôÔ∏è Recursos'}, 
                    type: 1
                },
                {
                    buttonId: 'bot_comandos', 
                    buttonText: {displayText: 'üìú Comandos'}, 
                    type: 1
                },
                {
                    buttonId: 'bot_suporte', 
                    buttonText: {displayText: 'üÜò Suporte T√©cnico'}, 
                    type: 1
                },
                {
                    buttonId: 'bot_sobre', 
                    buttonText: {displayText: '‚ÑπÔ∏è Sobre o Sistema'}, 
                    type: 1
                }
            ];

            // Tenta formato novo primeiro
            const buttonMessage = {
                text: `ü§ñ *INFORMA√á√ïES DO BOT*

Selecione uma op√ß√£o para obter informa√ß√µes detalhadas:`,
                footer: 'üîß Bot de Atendimento WhatsApp v2.1',
                buttons: buttons,
                headerType: 1
            };

            // Formato alternativo se o primeiro falhar
            const alternativeButtonMessage = {
                text: `ü§ñ *INFORMA√á√ïES DO BOT*

Selecione uma op√ß√£o para obter informa√ß√µes detalhadas:`,
                footer: 'üîß Bot de Atendimento WhatsApp v2.1',
                templateButtons: buttons.map((btn, index) => ({
                    index: index + 1,
                    quickReplyButton: {
                        displayText: btn.buttonText.displayText,
                        id: btn.buttonId
                    }
                }))
            };

            console.log(`üìã Tentando formato padr√£o...`);
            
            let result;
            try {
                result = await this.sock.sendMessage(userNumber, buttonMessage);
                console.log(`‚úÖ Formato padr√£o funcionou!`);
            } catch (firstError) {
                console.log(`‚ö†Ô∏è Formato padr√£o falhou, tentando alternativo...`);
                console.log(`üìã Estrutura alternativa:`, JSON.stringify(alternativeButtonMessage, null, 2));
                result = await this.sock.sendMessage(userNumber, alternativeButtonMessage);
                console.log(`‚úÖ Formato alternativo funcionou!`);
            }
            
            console.log(`‚úÖ Resultado do envio:`, JSON.stringify(result, null, 2));
            console.log(`‚úÖ Menu de bot√µes enviado com sucesso para ${userNumber}`);

        } catch (error) {
            console.error('‚ùå ERRO DETALHADO ao enviar bot√µes:');
            console.error('Tipo do erro:', error.constructor.name);
            console.error('Mensagem:', error.message);
            console.error('Stack:', error.stack);
            
            if (error.data) {
                console.error('Dados do erro:', JSON.stringify(error.data, null, 2));
            }
            
            console.log(`üîÑ Enviando menu fallback para ${userNumber}...`);
            
            // Fallback para menu texto se bot√µes falharem
            try {
                await this.sock.sendMessage(userNumber, {
                    text: `ü§ñ *INFORMA√á√ïES DO BOT*

üìã **Op√ß√µes dispon√≠veis:**
1Ô∏è‚É£ Vers√£o do Bot
2Ô∏è‚É£ Recursos
3Ô∏è‚É£ Comandos
4Ô∏è‚É£ Suporte T√©cnico 
5Ô∏è‚É£ Sobre o Sistema

_Digite o n√∫mero da op√ß√£o desejada_

‚ö†Ô∏è *Nota: Os bot√µes interativos n√£o est√£o dispon√≠veis no momento*`
                });
                console.log(`‚úÖ Menu fallback enviado para ${userNumber}`);
            } catch (fallbackError) {
                console.error('‚ùå Erro tamb√©m no fallback:', fallbackError);
            }
        }
    }

    /**
     * Processa resposta dos bot√µes interativos
     * @param {Object} message - Mensagem com resposta do bot√£o
     */
    async handleButtonMessage(message) {
        try {
            const userNumber = message.key.remoteJid;
            const buttonResponse = message.message.buttonsResponseMessage;
            const buttonId = buttonResponse.selectedButtonId;

            console.log(`üîò Bot√£o pressionado: ${buttonId} por ${userNumber}`);

            await this.sendTypingEffect(userNumber, 1500);

            let responseText = '';

            switch(buttonId) {
                case 'bot_versao':
                    responseText = `ü§ñ *VERS√ÉO DO BOT*

üì¶ **Vers√£o Atual:** v2.1.0
üìÖ **Lan√ßamento:** Janeiro 2025
üîÑ **√öltima Atualiza√ß√£o:** Sistema de Etapas Condicionais

‚ú® **Novidades v2.1:**
‚Ä¢ Sistema de etapas condicionais
‚Ä¢ Gerenciamento avan√ßado de etapas
‚Ä¢ Preserva√ß√£o autom√°tica de sess√£o
‚Ä¢ QR Code persistente
‚Ä¢ Upload e gerenciamento de v√≠deos

üìà **Pr√≥ximas Atualiza√ß√µes:**
‚Ä¢ Bot√µes interativos aprimorados
‚Ä¢ Sistema de agendamento
‚Ä¢ Relat√≥rios de atendimento`;
                    break;

                case 'bot_recursos':
                    responseText = `‚öôÔ∏è *RECURSOS DO BOT*

üéØ **Funcionalidades Principais:**
‚Ä¢ üé• Sistema de v√≠deos integrado
‚Ä¢ üîÑ Etapas condicionais din√¢micas
‚Ä¢ üéõÔ∏è Gerenciamento de conte√∫do
‚Ä¢ üì± Conex√£o QR Code + Pairing Code
‚Ä¢ ü§ñ Efeitos de digita√ß√£o realistas

üõ†Ô∏è **Comandos Administrativos:**
‚Ä¢ !gerenciar - Administrar etapas
‚Ä¢ !uparvideo - Upload de v√≠deos
‚Ä¢ !criarcondicional - Etapas condicionais
‚Ä¢ !listar - Ver todas as etapas

üí° **Tecnologias:**
‚Ä¢ Node.js 18+
‚Ä¢ Baileys WhatsApp Library
‚Ä¢ Sistema modular escal√°vel`;
                    break;

                case 'bot_comandos':
                    responseText = `üìú *COMANDOS DISPON√çVEIS*

üë• **Comandos do Usu√°rio:**
‚Ä¢ "oi" ou "menu" - Menu principal
‚Ä¢ N√∫meros (1, 2, 3...) - Navega√ß√£o r√°pida

üîß **Comandos Administrativos:**
‚Ä¢ !gerenciar - Menu de administra√ß√£o
‚Ä¢ !criar - Criar nova etapa
‚Ä¢ !editar [n√∫mero] - Editar etapa
‚Ä¢ !excluir [n√∫mero] - Excluir etapa
‚Ä¢ !legenda [n√∫mero] - Editar legenda
‚Ä¢ !listar - Listar todas as etapas

üé• **Comandos de V√≠deo:**
‚Ä¢ !uparvideo - Envie com v√≠deo para upload
‚Ä¢ !criarcondicional [id] [requisito] [nome]

üí° **Exemplos:**
‚Ä¢ !editar 2
‚Ä¢ !legenda 1
‚Ä¢ !criarcondicional promocoes suporte Promo√ß√µes`;
                    break;

                case 'bot_suporte':
                    responseText = `üÜò *SUPORTE T√âCNICO*

üìû **Como Obter Ajuda:**

üîß **Problemas Comuns:**
‚Ä¢ Sess√£o perdida ‚Üí npm run clear-session
‚Ä¢ Loop de reconex√£o ‚Üí Aguardar 3 tentativas
‚Ä¢ QR n√£o aparece ‚Üí Verificar conex√£o

üìö **Documenta√ß√£o:**
‚Ä¢ README.md - Guia completo
‚Ä¢ TROUBLESHOOTING.md - Resolu√ß√£o de problemas  
‚Ä¢ PHONE_EXAMPLES.md - Formatos de telefone

üí¨ **Contato:**
Para suporte especializado, entre em contato com o administrador do sistema.

üöÄ **Recursos de Auto-Ajuda:**
‚Ä¢ Logs detalhados no terminal
‚Ä¢ Mensagens de erro explicativas
‚Ä¢ Sistema de recupera√ß√£o autom√°tica`;
                    break;

                case 'bot_sobre':
                    responseText = `‚ÑπÔ∏è *SOBRE O SISTEMA*

üéØ **Miss√£o:**
Fornecer atendimento automatizado inteligente e eficiente via WhatsApp.

üí° **Caracter√≠sticas:**
‚Ä¢ Interface conversacional natural
‚Ä¢ Sistema de navega√ß√£o intuitivo
‚Ä¢ Conte√∫do multim√≠dia (v√≠deos)
‚Ä¢ Fluxos personaliz√°veis
‚Ä¢ Escalabilidade empresarial

üèóÔ∏è **Arquitetura:**
‚Ä¢ Modular e extens√≠vel
‚Ä¢ Handlers especializados
‚Ä¢ Configura√ß√£o flex√≠vel
‚Ä¢ Logs estruturados
‚Ä¢ Recupera√ß√£o de falhas

üîí **Seguran√ßa:**
‚Ä¢ Sess√µes criptografadas
‚Ä¢ Valida√ß√£o de entradas
‚Ä¢ Prote√ß√£o contra loops
‚Ä¢ Backup autom√°tico

‚≠ê **Diferenciais:**
‚Ä¢ Etapas condicionais √∫nicas
‚Ä¢ Preserva√ß√£o inteligente de sess√£o
‚Ä¢ Interface administrativa completa`;
                    break;

                default:
                    responseText = '‚ùì Op√ß√£o n√£o reconhecida. Tente novamente.';
            }

            await this.sock.sendMessage(userNumber, { text: responseText });

            // Oferece voltar ao menu
            setTimeout(async () => {
                await this.sock.sendMessage(userNumber, {
                    text: 'üîÑ _Digite "menu" para voltar ao menu principal_'
                });
            }, 2000);

        } catch (error) {
            console.error('‚ùå Erro ao processar resposta do bot√£o:', error);
        }
    }
}

module.exports = MessageHandler;