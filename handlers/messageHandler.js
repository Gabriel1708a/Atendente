const VideoHandler = require('./videoHandler');

/**
 * Handler para processar mensagens recebidas 
 */
class MessageHandler {
    constructor(sock) {
        this.sock = sock;
        this.videoHandler = new VideoHandler(sock);
    }

    /**
     * Processa mensagens recebidas
     * @param {Object} m - Objeto da mensagem
     */
    async handleMessage(m) {
        try {
            const messageType = Object.keys(m.message)[0];
            const userNumber = m.key.remoteJid;
            
            console.log(`üì• Tipo de mensagem recebida: ${messageType} de ${userNumber}`);
            
            // Verifica se √© comando !uparvideo em v√≠deo
            if (messageType === 'videoMessage') {
                const caption = m.message.videoMessage?.caption || '';
                if (caption.toLowerCase().includes('!uparvideo')) {
                    await this.videoHandler.handleVideoUpload(m, userNumber);
                    return;
                }
            }
            
            // Verifica se √© resposta de bot√£o interativo
            if (messageType === 'buttonsResponseMessage') {
                console.log(`üîò Resposta de bot√£o detectada de ${userNumber}`);
                await this.handleButtonMessage(m);
                return;
            }
            
            // Verifica se √© resposta de lista interativa
            if (messageType === 'listResponseMessage') {
                console.log(`üìã Resposta de lista detectada de ${userNumber}`);
                await this.handleListMessage(m);
                return;
            }
            
            // Verifica se √© uma mensagem de texto
            if (messageType === 'conversation' || messageType === 'extendedTextMessage') {
                const messageText = m.message.conversation || m.message.extendedTextMessage?.text || '';
                
                console.log(`üì© Mensagem recebida de ${userNumber}: ${messageText}`);
                
                // Verifica se usu√°rio est√° aguardando escolha de v√≠deo
                if (this.videoHandler.isAwaitingVideoPlacement(userNumber)) {
                    const userData = this.videoHandler.awaitingVideoPlacement.get(userNumber);
                    
                    // Se est√° aguardando nome de se√ß√£o personalizada
                    if (userData && userData.step === 'custom_name') {
                        await this.videoHandler.handleCustomSectionName(userNumber, messageText);
                        return;
                    }
                    
                    // Sen√£o, processa escolha de local
                    await this.videoHandler.handleVideoPlacement(userNumber, messageText.trim());
                    return;
                }

                // Verifica estados de gerenciamento
                const userState = this.videoHandler.getUserState(userNumber);
                if (userState) {
                    await this.handleUserStateMessage(userNumber, messageText, userState);
                    return;
                }
                
                // Verifica se √© comando de ativa√ß√£o
                if (this.isActivationCommand(messageText)) {
                    await this.sendWelcomeMenu(userNumber);
                    return;
                }

                // Comandos do sistema de gerenciamento
                if (messageText.toLowerCase().trim() === '!criar') {
                    await this.handleCreateStep(userNumber);
                    return;
                }

                if (messageText.toLowerCase().startsWith('!editar')) {
                    await this.handleEditStep(userNumber, messageText);
                    return;
                }

                if (messageText.toLowerCase().startsWith('!excluir')) {
                    await this.handleDeleteStep(userNumber, messageText);
                    return;
                }

                if (messageText.toLowerCase().startsWith('!legenda')) {
                    await this.handleEditCaption(userNumber, messageText);
                    return;
                }

                if (messageText.toLowerCase().trim() === '!listar') {
                    await this.handleListSteps(userNumber);
                    return;
                }

                // Verifica se √© comando !gerenciar
                if (messageText.toLowerCase().trim() === '!gerenciar') {
                    await this.sendStepManagementMenu(userNumber);
                    return;
                }
                
                // Verifica se √© resposta num√©rica (1, 2, etc.)
                if (this.isNumericResponse(messageText)) {
                    await this.handleNumericResponse(userNumber, messageText.trim());
                    return;
                }
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao processar mensagem:', error);
        }
    }

    /**
     * Verifica se √© comando de ativa√ß√£o
     * @param {string} text - Texto da mensagem
     * @returns {boolean}
     */
    isActivationCommand(text) {
        const activationCommands = ['oi', 'ol√°', 'menu', 'inicio', 'start'];
        return activationCommands.includes(text.toLowerCase().trim());
    }

    /**
     * Verifica se √© uma resposta num√©rica (1, 2, 3, 4, 5)
     * @param {string} text - Texto da mensagem
     * @returns {boolean}
     */
    isNumericResponse(text) {
        const numericResponses = ['1', '2', '3', '4', '5'];
        return numericResponses.includes(text.trim());
    }

    /**
     * Simula efeito de digita√ß√£o realista
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {number} duration - Dura√ß√£o em milissegundos
     */
    async sendTypingEffect(userNumber, duration = 2000) {
        try {
            await this.sock.sendPresenceUpdate('composing', userNumber);
            await new Promise(resolve => setTimeout(resolve, duration));
            await this.sock.sendPresenceUpdate('available', userNumber);
        } catch (error) {
            // Falha silenciosa se n√£o conseguir enviar presen√ßa
        }
    }

    /**
     * Envia menu de boas-vindas din√¢mico
     * @param {string} userNumber - N√∫mero do usu√°rio
     */
    async sendWelcomeMenu(userNumber) {
        try {
            // Efeito de digita√ß√£o
            await this.sendTypingEffect(userNumber, 1800);
            
            // Envia v√≠deo de boas-vindas se dispon√≠vel
            await this.sendVideoIfAvailable(userNumber, 'welcome');
            
            // Menu din√¢mico baseado nas etapas dispon√≠veis
            await this.sendFallbackMenu(userNumber);

        } catch (error) {
            console.error('‚ùå Erro ao enviar menu de boas-vindas:', error);
        }
    }

    /**
     * Envia menu fallback com emojis numerados (DIN√ÇMICO baseado no usu√°rio)
     * @param {string} userNumber - N√∫mero do usu√°rio
     */
    async sendFallbackMenu(userNumber) {
        try {
            // Efeito de digita√ß√£o antes do menu
            await this.sendTypingEffect(userNumber, 1800);
            
            // Obt√©m etapas dispon√≠veis para este usu√°rio
            const availableSteps = this.videoHandler.getAvailableStepsForUser(userNumber);
            const conditionalSteps = this.videoHandler.videoConfig.flow?.conditional || {};
            
            let menuOptions = '';
            let optionCount = 1;
            
            // Adiciona op√ß√µes baseadas nas etapas dispon√≠veis
            for (const stepId of availableSteps) {
                let stepName = '';
                let stepDescription = '';
                
                switch(stepId) {
                    case 'suporte':
                        stepName = 'Suporte üåê';
                        stepDescription = 'Falar com nosso suporte t√©cnico';
                        break;
                    case 'info_bot':
                        stepName = 'Informa√ß√µes Bot ü§ñ';
                        stepDescription = 'Conhecer mais sobre este bot';
                        break;
                    default:
                        // Etapa condicional personalizada
                        if (conditionalSteps[stepId]) {
                            stepName = `${conditionalSteps[stepId].name} ‚ú®`;
                            stepDescription = `Op√ß√£o especial desbloqueada!`;
                        }
                }
                
                if (stepName) {
                    menuOptions += `*${optionCount}Ô∏è‚É£ ${stepName}*\n${stepDescription}\n\n`;
                    optionCount++;
                }
            }
            
            const fallbackMessage = `üéâ *Ol√°! Bem-vindo ao nosso atendimento!*

Escolha uma das op√ß√µes digitando o n√∫mero correspondente:

${menuOptions}_Digite o n√∫mero para continuar_

---
üí° _Dica: Digite "menu" a qualquer momento para ver as op√ß√µes novamente_
üé• _Envie um v√≠deo com "!uparvideo" para adicionar v√≠deos ao bot_`;

            await this.sock.sendMessage(userNumber, { text: fallbackMessage });
            console.log(`‚úÖ Menu din√¢mico enviado para ${userNumber} (${availableSteps.length} op√ß√µes)`);

        } catch (error) {
            console.error('‚ùå Erro ao enviar menu fallback:', error);
        }
    }

    /**
     * Processa resposta num√©rica do usu√°rio (DIN√ÇMICA)
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {string} option - Op√ß√£o selecionada
     */
    async handleNumericResponse(userNumber, option) {
        try {
            // Verifica se √© op√ß√£o do menu Info Bot (1-5)
            if (['1', '2', '3', '4', '5'].includes(option)) {
                // Mapeia op√ß√µes do Info Bot
                const infoBotOptions = {
                    '1': 'bot_versao',
                    '2': 'bot_recursos', 
                    '3': 'bot_comandos',
                    '4': 'bot_suporte',
                    '5': 'bot_sobre'
                };
                
                const buttonId = infoBotOptions[option];
                if (buttonId) {
                    console.log(`üî¢ Info Bot: Usu√°rio ${userNumber} escolheu op√ß√£o ${option} (${buttonId})`);
                    await this.handleButtonMessage({
                        key: { remoteJid: userNumber },
                        message: {
                            buttonsResponseMessage: {
                                selectedButtonId: buttonId
                            }
                        }
                    });
                    return;
                }
            }
            
            // L√≥gica original para menu principal
            const availableSteps = this.videoHandler.getAvailableStepsForUser(userNumber);
            const optionIndex = parseInt(option) - 1;
            
            if (optionIndex < 0 || optionIndex >= availableSteps.length) {
                await this.sock.sendMessage(userNumber, {
                    text: `‚ùì Op√ß√£o inv√°lida. Digite "menu" para ver as op√ß√µes dispon√≠veis (1-${availableSteps.length}).`
                });
                return;
            }
            
            const selectedStepId = availableSteps[optionIndex];
            console.log(`üî¢ Menu Principal: Usu√°rio ${userNumber} escolheu op√ß√£o ${option} (${selectedStepId})`);
            
            // Registra que o usu√°rio visitou esta etapa
            this.videoHandler.trackUserNavigation(userNumber, selectedStepId);
            
            await this.handleButtonResponse(userNumber, selectedStepId);

        } catch (error) {
            console.error('‚ùå Erro ao processar resposta num√©rica:', error);
        }
    }

    /**
     * Processa resposta de bot√£o tradicional
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {string} buttonId - ID do bot√£o
     */
    async handleButtonResponse(userNumber, buttonId) {
        try {
            await this.sendTypingEffect(userNumber, 1500);

            let responseMessage = '';

            switch (buttonId) {
                case 'suporte':
                    await this.sendVideoIfAvailable(userNumber, 'suporte');
                    
                    responseMessage = `üåê *Suporte T√©cnico*

üîß **Como podemos ajudar voc√™?**

üìû **Contato direto:**
‚Ä¢ Email: suporte@empresa.com  
‚Ä¢ Telefone: (11) 9999-9999
‚Ä¢ Hor√°rio: Segunda a Sexta, 9h √†s 18h

üÜò **Problemas comuns:**
‚Ä¢ Dificuldades de acesso
‚Ä¢ Erro em funcionalidades
‚Ä¢ Solicita√ß√£o de recursos
‚Ä¢ Feedback e sugest√µes

üí¨ **Chat ao vivo:**
Nossa equipe est√° pronta para atender voc√™!

üîÑ _Digite "menu" para voltar ao in√≠cio_`;
                    break;

                case 'info_bot':
                    // Envia v√≠deo primeiro se dispon√≠vel
                    await this.sendVideoIfAvailable(userNumber, 'info_bot');
                    
                    // Envia menu numerado garantido
                    await this.sendBotInfoMenu(userNumber);
                    return; // N√£o envia mensagem de texto simples
                    break;

                default:
                    // Verifica se √© uma etapa condicional
                    const conditionalSteps = this.videoHandler.videoConfig.flow?.conditional || {};
                    if (conditionalSteps[buttonId]) {
                        // Envia v√≠deo da etapa condicional se dispon√≠vel
                        const sentConditionalVideo = await this.sendVideoIfAvailable(userNumber, buttonId);
                        if (sentConditionalVideo) {
                            return; // S√≥ envia o v√≠deo
                        } else {
                            responseMessage = `‚ú® *${conditionalSteps[buttonId].name}*\n\n‚ÑπÔ∏è Esta etapa especial est√° em configura√ß√£o.\n\nüîß Use o comando !gerenciar para adicionar conte√∫do.`;
                        }
                    } else {
                        responseMessage = '‚ùì Op√ß√£o n√£o reconhecida. Digite "menu" para ver as op√ß√µes dispon√≠veis.';
                    }
            }

            await this.sock.sendMessage(userNumber, { text: responseMessage });
            console.log(`‚úÖ Resposta enviada para ${userNumber}: ${buttonId}`);

        } catch (error) {
            console.error('‚ùå Erro ao processar resposta do bot√£o:', error);
        }
    }

    /**
     * Envia menu de informa√ß√µes do bot (SEMPRE FUNCIONA)
     * @param {string} userNumber - N√∫mero do usu√°rio
     */
    async sendBotInfoMenu(userNumber) {
        try {
            await this.sendTypingEffect(userNumber, 1500);

            const menuMessage = `ü§ñ *INFORMA√á√ïES DO BOT*

üìã **Selecione uma op√ß√£o:**

*1Ô∏è‚É£ Vers√£o do Bot* 
   Informa√ß√µes de vers√£o e atualiza√ß√µes

*2Ô∏è‚É£ Recursos*
   Lista completa de funcionalidades

*3Ô∏è‚É£ Comandos*
   Guia de todos os comandos dispon√≠veis

*4Ô∏è‚É£ Suporte T√©cnico*
   Ajuda e troubleshooting

*5Ô∏è‚É£ Sobre o Sistema*
   Miss√£o e caracter√≠sticas

---
üí° _Digite o n√∫mero da op√ß√£o desejada (1-5)_
üîÑ _Digite "menu" para voltar ao menu principal_`;

            await this.sock.sendMessage(userNumber, { text: menuMessage });
            console.log(`‚úÖ Menu Info Bot enviado para ${userNumber}`);

        } catch (error) {
            console.error('‚ùå Erro ao enviar menu Info Bot:', error);
        }
    }

    /**
     * Processa resposta dos bot√µes interativos
     * @param {Object} message - Mensagem com resposta do bot√£o
     */
    async handleButtonMessage(message) {
        try {
            const userNumber = message.key.remoteJid;
            const buttonResponse = message.message.buttonsResponseMessage;
            const buttonId = buttonResponse.selectedButtonId;

            console.log(`üîò Bot√£o pressionado: ${buttonId} por ${userNumber}`);

            await this.sendTypingEffect(userNumber, 1500);

            let responseText = '';

            switch(buttonId) {
                case 'bot_versao':
                    responseText = `ü§ñ *VERS√ÉO DO BOT*

üì¶ **Vers√£o Atual:** v2.1.0
üìÖ **Lan√ßamento:** Janeiro 2025
üîÑ **√öltima Atualiza√ß√£o:** Sistema de Etapas Condicionais

‚ú® **Novidades v2.1:**
‚Ä¢ Sistema de etapas condicionais
‚Ä¢ Gerenciamento avan√ßado de etapas
‚Ä¢ Preserva√ß√£o autom√°tica de sess√£o
‚Ä¢ QR Code persistente
‚Ä¢ Upload e gerenciamento de v√≠deos

üìà **Pr√≥ximas Atualiza√ß√µes:**
‚Ä¢ Bot√µes interativos aprimorados
‚Ä¢ Sistema de agendamento
‚Ä¢ Relat√≥rios de atendimento`;
                    break;

                case 'bot_recursos':
                    responseText = `‚öôÔ∏è *RECURSOS DO BOT*

üéØ **Funcionalidades Principais:**
‚Ä¢ üé• Sistema de v√≠deos integrado
‚Ä¢ üîÑ Etapas condicionais din√¢micas
‚Ä¢ üéõÔ∏è Gerenciamento de conte√∫do
‚Ä¢ üì± Conex√£o QR Code + Pairing Code
‚Ä¢ ü§ñ Efeitos de digita√ß√£o realistas

üõ†Ô∏è **Comandos Administrativos:**
‚Ä¢ !gerenciar - Administrar etapas
‚Ä¢ !uparvideo - Upload de v√≠deos
‚Ä¢ !criarcondicional - Etapas condicionais
‚Ä¢ !listar - Ver todas as etapas

üí° **Tecnologias:**
‚Ä¢ Node.js 18+
‚Ä¢ Baileys WhatsApp Library
‚Ä¢ Sistema modular escal√°vel`;
                    break;

                case 'bot_comandos':
                    responseText = `üìú *COMANDOS DISPON√çVEIS*

üë• **Comandos do Usu√°rio:**
‚Ä¢ "oi" ou "menu" - Menu principal
‚Ä¢ N√∫meros (1, 2, 3...) - Navega√ß√£o r√°pida

üîß **Comandos Administrativos:**
‚Ä¢ !gerenciar - Menu de administra√ß√£o
‚Ä¢ !criar - Criar nova etapa
‚Ä¢ !editar [n√∫mero] - Editar etapa
‚Ä¢ !excluir [n√∫mero] - Excluir etapa
‚Ä¢ !legenda [n√∫mero] - Editar legenda
‚Ä¢ !listar - Listar todas as etapas

üé• **Comandos de V√≠deo:**
‚Ä¢ !uparvideo - Envie com v√≠deo para upload
‚Ä¢ !criarcondicional [id] [requisito] [nome]

üí° **Exemplos:**
‚Ä¢ !editar 2
‚Ä¢ !legenda 1
‚Ä¢ !criarcondicional promocoes suporte Promo√ß√µes`;
                    break;

                case 'bot_suporte':
                    responseText = `üÜò *SUPORTE T√âCNICO*

üìû **Como Obter Ajuda:**

üîß **Problemas Comuns:**
‚Ä¢ Sess√£o perdida ‚Üí npm run clear-session
‚Ä¢ Loop de reconex√£o ‚Üí Aguardar 3 tentativas
‚Ä¢ QR n√£o aparece ‚Üí Verificar conex√£o

üìö **Documenta√ß√£o:**
‚Ä¢ README.md - Guia completo
‚Ä¢ TROUBLESHOOTING.md - Resolu√ß√£o de problemas  
‚Ä¢ PHONE_EXAMPLES.md - Formatos de telefone

üí¨ **Contato:**
Para suporte especializado, entre em contato com o administrador do sistema.

üöÄ **Recursos de Auto-Ajuda:**
‚Ä¢ Logs detalhados no terminal
‚Ä¢ Mensagens de erro explicativas
‚Ä¢ Sistema de recupera√ß√£o autom√°tica`;
                    break;

                case 'bot_sobre':
                    responseText = `‚ÑπÔ∏è *SOBRE O SISTEMA*

üéØ **Miss√£o:**
Fornecer atendimento automatizado inteligente e eficiente via WhatsApp.

üí° **Caracter√≠sticas:**
‚Ä¢ Interface conversacional natural
‚Ä¢ Sistema de navega√ß√£o intuitivo
‚Ä¢ Conte√∫do multim√≠dia (v√≠deos)
‚Ä¢ Fluxos personaliz√°veis
‚Ä¢ Escalabilidade empresarial

üèóÔ∏è **Arquitetura:**
‚Ä¢ Modular e extens√≠vel
‚Ä¢ Handlers especializados
‚Ä¢ Configura√ß√£o flex√≠vel
‚Ä¢ Logs estruturados
‚Ä¢ Recupera√ß√£o de falhas

üîí **Seguran√ßa:**
‚Ä¢ Sess√µes criptografadas
‚Ä¢ Valida√ß√£o de entradas
‚Ä¢ Prote√ß√£o contra loops
‚Ä¢ Backup autom√°tico

‚≠ê **Diferenciais:**
‚Ä¢ Etapas condicionais √∫nicas
‚Ä¢ Preserva√ß√£o inteligente de sess√£o
‚Ä¢ Interface administrativa completa`;
                    break;

                default:
                    responseText = '‚ùì Op√ß√£o n√£o reconhecida. Tente novamente.';
            }

            await this.sock.sendMessage(userNumber, { text: responseText });

            // Oferece voltar ao menu
            setTimeout(async () => {
                await this.sock.sendMessage(userNumber, {
                    text: 'üîÑ _Digite "menu" para voltar ao menu principal_'
                });
            }, 2000);

        } catch (error) {
            console.error('‚ùå Erro ao processar resposta do bot√£o:', error);
        }
    }

    /**
     * Processa resposta das listas interativas
     * @param {Object} message - Mensagem com resposta da lista
     */
    async handleListMessage(message) {
        try {
            const userNumber = message.key.remoteJid;
            const listResponse = message.message.listResponseMessage;
            const selectedId = listResponse.singleSelectReply.selectedRowId;

            console.log(`üìã Lista selecionada: ${selectedId} por ${userNumber}`);

            // Usa a mesma l√≥gica dos bot√µes
            await this.handleButtonMessage({
                key: message.key,
                message: {
                    buttonsResponseMessage: {
                        selectedButtonId: selectedId
                    }
                }
            });

        } catch (error) {
            console.error('‚ùå Erro ao processar resposta da lista:', error);
        }
    }

    /**
     * Envia v√≠deo se dispon√≠vel para a se√ß√£o
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {string} section - Se√ß√£o (welcome, suporte, info_bot)
     * @returns {boolean} - True se v√≠deo foi enviado
     */
    async sendVideoIfAvailable(userNumber, section) {
        try {
            if (this.videoHandler.hasVideoForSection(section)) {
                const videoPath = this.videoHandler.getVideoForSection(section);
                const customCaption = this.videoHandler.videoConfig.captions?.[section] || `üé• V√≠deo de ${section}`;
                
                await this.sock.sendMessage(userNumber, {
                    video: { url: videoPath },
                    caption: customCaption
                });
                
                console.log(`üé• V√≠deo ${section} enviado para ${userNumber}`);
                return true;
            }
            return false;
        } catch (error) {
            console.error(`‚ùå Erro ao enviar v√≠deo ${section}:`, error);
            return false;
        }
    }

    // M√©todos de gerenciamento simplificados - implementa√ß√µes b√°sicas
    async sendStepManagementMenu(userNumber) {
        const message = `üéõÔ∏è *GERENCIAMENTO DE ETAPAS*

üìã **Comandos dispon√≠veis:**
‚Ä¢ !criar - Criar nova etapa
‚Ä¢ !listar - Ver todas etapas
‚Ä¢ !editar [n√∫mero] - Editar etapa
‚Ä¢ !legenda [n√∫mero] - Editar legenda
‚Ä¢ !excluir [n√∫mero] - Excluir etapa`;

        await this.sock.sendMessage(userNumber, { text: message });
    }

    async handleCreateStep(userNumber) {
        await this.sock.sendMessage(userNumber, { 
            text: 'üöß Sistema de cria√ß√£o em desenvolvimento. Use !criarcondicional para etapas condicionais.' 
        });
    }

    async handleEditStep(userNumber, messageText) {
        await this.sock.sendMessage(userNumber, { 
            text: 'üöß Sistema de edi√ß√£o em desenvolvimento.' 
        });
    }

    async handleDeleteStep(userNumber, messageText) {
        await this.sock.sendMessage(userNumber, { 
            text: 'üöß Sistema de exclus√£o em desenvolvimento.' 
        });
    }

    async handleEditCaption(userNumber, messageText) {
        await this.sock.sendMessage(userNumber, { 
            text: 'üöß Sistema de edi√ß√£o de legenda em desenvolvimento.' 
        });
    }

    async handleListSteps(userNumber) {
        const availableSteps = this.videoHandler.getAvailableStepsForUser(userNumber);
        let message = 'üìú **LISTA DE ETAPAS**\n\n';
        
        availableSteps.forEach((step, index) => {
            message += `${index + 1}Ô∏è‚É£ ${step}\n`;
        });
        
        await this.sock.sendMessage(userNumber, { text: message });
    }

    async handleUserStateMessage(userNumber, messageText, userState) {
        // Implementa√ß√£o b√°sica para estados de usu√°rio
        await this.sock.sendMessage(userNumber, { 
            text: 'Estado de usu√°rio processado. Digite "menu" para continuar.' 
        });
        this.videoHandler.clearUserState(userNumber);
    }
}

module.exports = MessageHandler;
