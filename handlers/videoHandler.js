const fs = require('fs');
const path = require('path');

// Importa fun√ß√£o de download se necess√°rio
let downloadContentFromMessage;
try {
    ({ downloadContentFromMessage } = require('@whiskeysockets/baileys'));
} catch (error) {
    console.log('‚ö†Ô∏è  downloadContentFromMessage n√£o dispon√≠vel como import direto');
}

/**
 * Handler para gerenciar v√≠deos do bot - comando !uparvideo
 */
class VideoHandler {
    constructor(sock) {
        this.sock = sock;
        this.videosDir = path.join(__dirname, '..', 'videos');
        this.configFile = path.join(this.videosDir, 'videos-config.json');
        this.awaitingVideoPlacement = new Map(); // Armazena usu√°rios aguardando escolha de local
        
        // Cria diret√≥rio de v√≠deos se n√£o existir
        this.ensureVideosDirectory();
        
        // Carrega configura√ß√£o de v√≠deos
        this.videoConfig = this.loadVideoConfig();
    }

    /**
     * Garante que o diret√≥rio de v√≠deos existe
     */
    ensureVideosDirectory() {
        if (!fs.existsSync(this.videosDir)) {
            fs.mkdirSync(this.videosDir, { recursive: true });
            console.log('üìÅ Diret√≥rio de v√≠deos criado');
        }
    }

    /**
     * Carrega configura√ß√£o de v√≠deos
     */
    loadVideoConfig() {
        try {
            if (fs.existsSync(this.configFile)) {
                const config = JSON.parse(fs.readFileSync(this.configFile, 'utf8'));
                console.log('üìã Configura√ß√£o de v√≠deos carregada');
                return config;
            }
        } catch (error) {
            console.error('‚ùå Erro ao carregar config de v√≠deos:', error);
        }
        
        // Configura√ß√£o padr√£o
        return {
            welcome: null,
            suporte: null,
            info_bot: null,
            custom: [],
            captions: {
                welcome: "üé• *V√≠deo de boas-vindas*",
                suporte: "üé• *V√≠deo informativo sobre suporte*",
                info_bot: "üé• *Informa√ß√µes sobre o bot*"
            },
            // Sistema de fluxo condicional
            flow: {
                // Etapas que aparecem no menu principal
                mainMenu: ['suporte', 'info_bot'],
                // Etapas condicionais: aparecem apenas ap√≥s visitar certas se√ß√µes
                conditional: {
                    // Exemplo: etapa4 s√≥ aparece depois de visitar suporte
                    // 'etapa4': { showAfter: 'suporte', name: 'Nova Op√ß√£o' }
                }
            },
            // Rastreamento de navega√ß√£o por usu√°rio
            userNavigation: {}
        };
    }

    /**
     * Salva configura√ß√£o de v√≠deos
     */
    saveVideoConfig() {
        try {
            fs.writeFileSync(this.configFile, JSON.stringify(this.videoConfig, null, 2));
            console.log('üíæ Configura√ß√£o de v√≠deos salva');
        } catch (error) {
            console.error('‚ùå Erro ao salvar config de v√≠deos:', error);
        }
    }

    /**
     * Processa comando !uparvideo
     */
    async handleVideoUpload(message, userNumber) {
        try {
            // Verifica se a mensagem tem v√≠deo
            const videoMessage = message.message.videoMessage;
            if (!videoMessage) {
                await this.sendTypingEffect(userNumber);
                await this.sock.sendMessage(userNumber, {
                    text: '‚ùå *Comando !uparvideo deve ser usado com v√≠deo*\n\nüìã *Como usar:*\n1Ô∏è‚É£ Selecione ou grave um v√≠deo\n2Ô∏è‚É£ Adicione "!uparvideo" na legenda\n3Ô∏è‚É£ Envie para o bot\n\nüí° *Dica:* O v√≠deo deve ter menos de 16MB'
                });
                return;
            }

            console.log(`üé• Comando !uparvideo recebido de ${userNumber}`);
            
            // Baixa o v√≠deo
            const videoBuffer = await this.downloadVideo(message);
            if (!videoBuffer) {
                await this.sendTypingEffect(userNumber);
                await this.sock.sendMessage(userNumber, {
                    text: '‚ùå *Erro ao baixar o v√≠deo*\n\nüîß *Poss√≠veis causas:*\n‚Ä¢ V√≠deo muito grande (limite ~16MB)\n‚Ä¢ Formato n√£o suportado\n‚Ä¢ Problema de conectividade\n\nüí° *Solu√ß√µes:*\n‚Ä¢ Tente um v√≠deo menor\n‚Ä¢ Use formato MP4\n‚Ä¢ Verifique sua conex√£o'
                });
                return;
            }

            // Salva v√≠deo tempor√°rio
            const tempVideoPath = await this.saveTemporaryVideo(videoBuffer, userNumber);
            
            // Armazena informa√ß√µes do usu√°rio aguardando escolha
            this.awaitingVideoPlacement.set(userNumber, {
                videoPath: tempVideoPath,
                timestamp: Date.now()
            });

            // Envia menu de escolha de local
            await this.sendVideoPlacementMenu(userNumber);

        } catch (error) {
            console.error('‚ùå Erro ao processar !uparvideo:', error);
            await this.sock.sendMessage(userNumber, {
                text: '‚ùå Erro interno. Tente novamente mais tarde.'
            });
        }
    }

    /**
     * Baixa o v√≠deo da mensagem
     */
    async downloadVideo(message) {
        try {
            console.log('üîÑ Tentando baixar v√≠deo...');
            
            // Verifica se a mensagem tem v√≠deo
            const videoMessage = message.message.videoMessage;
            if (!videoMessage) {
                throw new Error('Mensagem n√£o cont√©m v√≠deo');
            }
            
            console.log('üì± V√≠deo detectado, iniciando download...');
            
            // Tenta diferentes m√©todos de download baseados na vers√£o do Baileys
            let buffer = null;
            
            // M√©todo 1: downloadContentFromMessage (mais recente)
            if (downloadContentFromMessage) {
                console.log('üîÑ Usando downloadContentFromMessage (import direto)...');
                const stream = await downloadContentFromMessage(videoMessage, 'video');
                
                // Converte stream para buffer
                const chunks = [];
                for await (const chunk of stream) {
                    chunks.push(chunk);
                }
                buffer = Buffer.concat(chunks);
                console.log(`‚úÖ Download conclu√≠do: ${buffer.length} bytes`);
                
            } else if (typeof this.sock.downloadContentFromMessage === 'function') {
                console.log('üîÑ Usando downloadContentFromMessage (m√©todo do socket)...');
                const stream = await this.sock.downloadContentFromMessage(videoMessage, 'video');
                
                // Converte stream para buffer
                const chunks = [];
                for await (const chunk of stream) {
                    chunks.push(chunk);
                }
                buffer = Buffer.concat(chunks);
                console.log(`‚úÖ Download conclu√≠do: ${buffer.length} bytes`);
                
            } else if (typeof this.sock.downloadMediaMessage === 'function') {
                // M√©todo 2: downloadMediaMessage (vers√£o anterior)
                console.log('üîÑ Usando downloadMediaMessage...');
                buffer = await this.sock.downloadMediaMessage(message);
                console.log(`‚úÖ Download conclu√≠do: ${buffer.length} bytes`);
                
            } else {
                throw new Error('Nenhum m√©todo de download dispon√≠vel');
            }
            
            if (!buffer || buffer.length === 0) {
                throw new Error('Buffer vazio - download falhou');
            }
            
            return buffer;
            
        } catch (error) {
            console.error('‚ùå Erro ao baixar v√≠deo:', error);
            console.log('üîç M√©todos dispon√≠veis:');
            console.log(`   downloadContentFromMessage (import): ${downloadContentFromMessage ? 'SIM' : 'N√ÉO'}`);
            console.log(`   downloadContentFromMessage (socket): ${typeof this.sock.downloadContentFromMessage === 'function' ? 'SIM' : 'N√ÉO'}`);
            console.log(`   downloadMediaMessage: ${typeof this.sock.downloadMediaMessage === 'function' ? 'SIM' : 'N√ÉO'}`);
            return null;
        }
    }

    /**
     * Salva v√≠deo tempor√°rio
     */
    async saveTemporaryVideo(videoBuffer, userNumber) {
        const fileName = `temp_${userNumber.replace(/[^0-9]/g, '')}_${Date.now()}.mp4`;
        const filePath = path.join(this.videosDir, fileName);
        
        fs.writeFileSync(filePath, videoBuffer);
        console.log(`üíæ V√≠deo tempor√°rio salvo: ${fileName}`);
        
        return filePath;
    }

    /**
     * Envia menu para escolher onde adicionar o v√≠deo
     */
    async sendVideoPlacementMenu(userNumber) {
        await this.sendTypingEffect(userNumber);
        
        const menuMessage = `üé• *V√≠deo recebido com sucesso!*

Onde voc√™ gostaria de adicionar este v√≠deo?

*1Ô∏è‚É£ Menu Principal (Boas-vindas)*
_O v√≠deo ser√° enviado junto com o menu inicial_

*2Ô∏è‚É£ Se√ß√£o Suporte*
_V√≠deo ser√° enviado na op√ß√£o "Suporte üåê"_

*3Ô∏è‚É£ Informa√ß√µes do Bot*
_V√≠deo ser√° enviado na op√ß√£o "Informa√ß√µes Bot ü§ñ"_

*4Ô∏è‚É£ Nova Se√ß√£o Personalizada*
_Criar nova op√ß√£o no menu com este v√≠deo_

*5Ô∏è‚É£ Cancelar*
_Descartar este v√≠deo_

---
üí° _Digite o n√∫mero da op√ß√£o desejada (1-5)_`;

        await this.sock.sendMessage(userNumber, { text: menuMessage });
    }

    /**
     * Processa escolha de local do v√≠deo
     */
    async handleVideoPlacement(userNumber, option) {
        const userData = this.awaitingVideoPlacement.get(userNumber);
        if (!userData) {
            await this.sock.sendMessage(userNumber, {
                text: '‚ùì N√£o h√° v√≠deo pendente. Use !uparvideo em um v√≠deo primeiro.'
            });
            return;
        }

        // Remove da lista de espera
        this.awaitingVideoPlacement.delete(userNumber);

        await this.sendTypingEffect(userNumber);

        switch (option) {
            case '1':
                await this.addVideoToWelcome(userData.videoPath, userNumber);
                break;
            case '2':
                await this.addVideoToSupport(userData.videoPath, userNumber);
                break;
            case '3':
                await this.addVideoToBotInfo(userData.videoPath, userNumber);
                break;
            case '4':
                await this.createCustomVideoSection(userData.videoPath, userNumber);
                break;
            case '5':
                await this.cancelVideoUpload(userData.videoPath, userNumber);
                break;
            default:
                await this.sock.sendMessage(userNumber, {
                    text: '‚ùì Op√ß√£o inv√°lida. V√≠deo descartado. Use !uparvideo novamente se necess√°rio.'
                });
                this.deleteTemporaryVideo(userData.videoPath);
        }
    }

    /**
     * Adiciona v√≠deo ao menu principal
     */
    async addVideoToWelcome(videoPath, userNumber) {
        const finalPath = path.join(this.videosDir, 'welcome_video.mp4');
        
        // Remove v√≠deo anterior se existir
        if (this.videoConfig.welcome && fs.existsSync(this.videoConfig.welcome)) {
            fs.unlinkSync(this.videoConfig.welcome);
        }
        
        // Move v√≠deo para local final
        fs.renameSync(videoPath, finalPath);
        this.videoConfig.welcome = finalPath;
        this.saveVideoConfig();

        await this.sock.sendMessage(userNumber, {
            text: '‚úÖ *V√≠deo adicionado ao Menu Principal!*\n\nüé• O v√≠deo ser√° enviado automaticamente junto com as boas-vindas quando usu√°rios digitarem "oi" ou "menu".\n\nüí° Teste digitando "menu" para verificar!'
        });

        console.log(`‚úÖ V√≠deo de boas-vindas atualizado por ${userNumber}`);
    }

    /**
     * Adiciona v√≠deo √† se√ß√£o suporte
     */
    async addVideoToSupport(videoPath, userNumber) {
        const finalPath = path.join(this.videosDir, 'suporte_video.mp4');
        
        if (this.videoConfig.suporte && fs.existsSync(this.videoConfig.suporte)) {
            fs.unlinkSync(this.videoConfig.suporte);
        }
        
        fs.renameSync(videoPath, finalPath);
        this.videoConfig.suporte = finalPath;
        this.saveVideoConfig();

        await this.sock.sendMessage(userNumber, {
            text: '‚úÖ *V√≠deo adicionado √† Se√ß√£o Suporte!*\n\nüé• O v√≠deo ser√° enviado quando usu√°rios escolherem a op√ß√£o "Suporte üåê" (op√ß√£o 1).\n\nüí° Teste digitando "1" para verificar!'
        });

        console.log(`‚úÖ V√≠deo de suporte atualizado por ${userNumber}`);
    }

    /**
     * Adiciona v√≠deo √†s informa√ß√µes do bot
     */
    async addVideoToBotInfo(videoPath, userNumber) {
        const finalPath = path.join(this.videosDir, 'info_bot_video.mp4');
        
        if (this.videoConfig.info_bot && fs.existsSync(this.videoConfig.info_bot)) {
            fs.unlinkSync(this.videoConfig.info_bot);
        }
        
        fs.renameSync(videoPath, finalPath);
        this.videoConfig.info_bot = finalPath;
        this.saveVideoConfig();

        await this.sock.sendMessage(userNumber, {
            text: '‚úÖ *V√≠deo adicionado √†s Informa√ß√µes do Bot!*\n\nüé• O v√≠deo ser√° enviado quando usu√°rios escolherem a op√ß√£o "Informa√ß√µes Bot ü§ñ" (op√ß√£o 2).\n\nüí° Teste digitando "2" para verificar!'
        });

        console.log(`‚úÖ V√≠deo de info bot atualizado por ${userNumber}`);
    }

    /**
     * Cria se√ß√£o personalizada com v√≠deo
     */
    async createCustomVideoSection(videoPath, userNumber) {
        await this.sendTypingEffect(userNumber, 1500);
        
        await this.sock.sendMessage(userNumber, {
            text: 'üéØ *Criando Nova Se√ß√£o Personalizada*\n\nDigite o nome/t√≠tulo para esta nova op√ß√£o:\n\nüí° Exemplo: "Tutorial de Uso", "Promo√ß√µes", "Novidades", etc.'
        });

        // Armazena dados para pr√≥xima resposta
        this.awaitingVideoPlacement.set(userNumber, {
            videoPath: videoPath,
            step: 'custom_name',
            timestamp: Date.now()
        });
    }

    /**
     * Processa nome da se√ß√£o personalizada
     */
    async handleCustomSectionName(userNumber, sectionName) {
        const userData = this.awaitingVideoPlacement.get(userNumber);
        if (!userData || userData.step !== 'custom_name') {
            return false;
        }

        try {
            // Remove da lista de espera
            this.awaitingVideoPlacement.delete(userNumber);

            // Limpa nome da se√ß√£o (remove caracteres especiais)
            const cleanSectionName = sectionName.replace(/[^a-zA-Z0-9\s]/g, '').trim();
            const sectionId = `custom_${Date.now()}`;
            
            // Salva v√≠deo da se√ß√£o personalizada
            const finalPath = path.join(this.videosDir, `${sectionId}_video.mp4`);
            fs.renameSync(userData.videoPath, finalPath);

            // Adiciona √† configura√ß√£o
            if (!this.videoConfig.custom) {
                this.videoConfig.custom = [];
            }

            this.videoConfig.custom.push({
                id: sectionId,
                name: cleanSectionName,
                videoPath: finalPath,
                created: Date.now()
            });

            this.saveVideoConfig();

            await this.sendTypingEffect(userNumber, 2000);
            
            await this.sock.sendMessage(userNumber, {
                text: `‚úÖ *Se√ß√£o Personalizada Criada!*\n\nüìù **Nome:** ${cleanSectionName}\nüé• **V√≠deo:** Adicionado com sucesso\nüÜî **ID:** ${sectionId}\n\nüí° Esta se√ß√£o ser√° adicionada automaticamente ao menu principal em breve!\n\nüîÑ Digite "menu" para testar o bot atualizado.`
            });

            console.log(`‚úÖ Se√ß√£o personalizada "${cleanSectionName}" criada por ${userNumber}`);
            return true;

        } catch (error) {
            console.error('‚ùå Erro ao criar se√ß√£o personalizada:', error);
            await this.sock.sendMessage(userNumber, {
                text: '‚ùå Erro ao criar se√ß√£o personalizada. Tente novamente.'
            });
            this.deleteTemporaryVideo(userData.videoPath);
            return false;
        }
    }

    /**
     * Obt√©m todas as se√ß√µes personalizadas
     */
    getCustomSections() {
        return this.videoConfig.custom || [];
    }

    /**
     * Registra que usu√°rio visitou uma etapa
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {string} stepId - ID da etapa visitada
     */
    trackUserNavigation(userNumber, stepId) {
        if (!this.videoConfig.userNavigation) {
            this.videoConfig.userNavigation = {};
        }
        
        if (!this.videoConfig.userNavigation[userNumber]) {
            this.videoConfig.userNavigation[userNumber] = {
                visited: [],
                lastVisit: Date.now()
            };
        }
        
        const userNav = this.videoConfig.userNavigation[userNumber];
        
        // Adiciona etapa se n√£o foi visitada antes
        if (!userNav.visited.includes(stepId)) {
            userNav.visited.push(stepId);
            userNav.lastVisit = Date.now();
            this.saveVideoConfig();
            console.log(`üìç Usu√°rio ${userNumber} visitou etapa: ${stepId}`);
        }
    }

    /**
     * Verifica se usu√°rio j√° visitou uma etapa espec√≠fica
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {string} stepId - ID da etapa
     * @returns {boolean}
     */
    hasUserVisited(userNumber, stepId) {
        const userNav = this.videoConfig.userNavigation?.[userNumber];
        return userNav ? userNav.visited.includes(stepId) : false;
    }

    /**
     * Obt√©m etapas dispon√≠veis para um usu√°rio espec√≠fico
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @returns {Array} Lista de etapas dispon√≠veis
     */
    getAvailableStepsForUser(userNumber) {
        const mainSteps = this.videoConfig.flow?.mainMenu || ['suporte', 'info_bot'];
        const conditionalSteps = this.videoConfig.flow?.conditional || {};
        
        const availableSteps = [...mainSteps];
        
        // Verifica etapas condicionais
        for (const [stepId, condition] of Object.entries(conditionalSteps)) {
            if (this.hasUserVisited(userNumber, condition.showAfter)) {
                availableSteps.push(stepId);
            }
        }
        
        return availableSteps;
    }

    /**
     * Adiciona etapa condicional
     * @param {string} stepId - ID da nova etapa
     * @param {string} showAfterStep - Etapa que deve ser visitada antes
     * @param {string} stepName - Nome da etapa
     * @param {string} videoPath - Caminho do v√≠deo (opcional)
     */
    addConditionalStep(stepId, showAfterStep, stepName, videoPath = null) {
        if (!this.videoConfig.flow) {
            this.videoConfig.flow = { mainMenu: ['suporte', 'info_bot'], conditional: {} };
        }
        
        if (!this.videoConfig.flow.conditional) {
            this.videoConfig.flow.conditional = {};
        }
        
        this.videoConfig.flow.conditional[stepId] = {
            showAfter: showAfterStep,
            name: stepName,
            videoPath: videoPath
        };
        
        // Adiciona legenda padr√£o se n√£o existir
        if (!this.videoConfig.captions) {
            this.videoConfig.captions = {};
        }
        
        if (!this.videoConfig.captions[stepId]) {
            this.videoConfig.captions[stepId] = `üé• *${stepName}*`;
        }
        
        this.saveVideoConfig();
        console.log(`‚úÖ Etapa condicional '${stepName}' criada - aparece ap√≥s '${showAfterStep}'`);
    }

    /**
     * Cancela upload do v√≠deo
     */
    async cancelVideoUpload(videoPath, userNumber) {
        this.deleteTemporaryVideo(videoPath);
        
        await this.sock.sendMessage(userNumber, {
            text: '‚ùå *Upload cancelado*\n\nüóëÔ∏è V√≠deo descartado com sucesso.'
        });

        console.log(`üóëÔ∏è Upload de v√≠deo cancelado por ${userNumber}`);
    }

    /**
     * Remove v√≠deo tempor√°rio
     */
    deleteTemporaryVideo(videoPath) {
        try {
            if (fs.existsSync(videoPath)) {
                fs.unlinkSync(videoPath);
                console.log('üóëÔ∏è V√≠deo tempor√°rio removido');
            }
        } catch (error) {
            console.error('‚ùå Erro ao remover v√≠deo tempor√°rio:', error);
        }
    }

    /**
     * Simula efeito de digita√ß√£o
     */
    async sendTypingEffect(userNumber, duration = 2000) {
        try {
            await this.sock.sendPresenceUpdate('composing', userNumber);
            await new Promise(resolve => setTimeout(resolve, duration));
            await this.sock.sendPresenceUpdate('available', userNumber);
        } catch (error) {
            console.error('‚ùå Erro no efeito de digita√ß√£o:', error);
        }
    }

    /**
     * Verifica se usu√°rio est√° aguardando escolha de v√≠deo
     */
    isAwaitingVideoPlacement(userNumber) {
        return this.awaitingVideoPlacement.has(userNumber);
    }

    /**
     * Define estado do usu√°rio para fluxos de gerenciamento
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @param {string} state - Estado atual
     * @param {object} data - Dados adicionais
     */
    setUserState(userNumber, state, data = {}) {
        if (!this.videoConfig.userStates) {
            this.videoConfig.userStates = {};
        }
        
        this.videoConfig.userStates[userNumber] = {
            state: state,
            data: data,
            timestamp: Date.now()
        };
        
        console.log(`üìç Estado do usu√°rio ${userNumber}: ${state}`);
    }

    /**
     * Obt√©m estado atual do usu√°rio
     * @param {string} userNumber - N√∫mero do usu√°rio
     * @returns {object|null}
     */
    getUserState(userNumber) {
        return this.videoConfig.userStates?.[userNumber] || null;
    }

    /**
     * Remove estado do usu√°rio
     * @param {string} userNumber - N√∫mero do usu√°rio
     */
    clearUserState(userNumber) {
        if (this.videoConfig.userStates && this.videoConfig.userStates[userNumber]) {
            delete this.videoConfig.userStates[userNumber];
            console.log(`üßπ Estado limpo para usu√°rio ${userNumber}`);
        }
    }

    /**
     * Obt√©m v√≠deo configurado para uma se√ß√£o
     */
    getVideoForSection(section) {
        return this.videoConfig[section] || null;
    }

    /**
     * Verifica se existe v√≠deo para uma se√ß√£o
     */
    hasVideoForSection(section) {
        const videoPath = this.videoConfig[section];
        return videoPath && fs.existsSync(videoPath);
    }
}

module.exports = VideoHandler;