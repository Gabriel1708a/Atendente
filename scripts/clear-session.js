#!/usr/bin/env node

const SessionManager = require('../utils/sessionManager');

console.log('üîß LIMPADOR DE SESS√ÉO DO BOT WHATSAPP\n');

const sessionManager = new SessionManager();

// Verifica se existe sess√£o
if (!sessionManager.hasSession()) {
    console.log('‚ÑπÔ∏è  Nenhuma sess√£o encontrada.');
    console.log('O bot j√° est√° pronto para uma nova conex√£o.');
    process.exit(0);
}

// Exibe informa√ß√µes da sess√£o atual
console.log('üìä SESS√ÉO ATUAL ENCONTRADA:');
sessionManager.displaySessionStatus();

console.log('\n‚ö†Ô∏è  IMPORTANTE:');
console.log('‚Ä¢ Isso ir√° remover COMPLETAMENTE a sess√£o atual');
console.log('‚Ä¢ Voc√™ precisar√° conectar novamente (QR ou c√≥digo)');
console.log('‚Ä¢ Todos os dados de autentica√ß√£o ser√£o perdidos');

// Pergunta confirma√ß√£o
const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

rl.question('\n‚ùì Deseja continuar? (digite "SIM" para confirmar): ', (answer) => {
    rl.close();
    
    if (answer.toUpperCase() === 'SIM') {
        console.log('\nüîÑ Removendo sess√£o...');
        
        if (sessionManager.clearSession()) {
            console.log('\n‚úÖ SESS√ÉO REMOVIDA COM SUCESSO!');
            console.log('\nüöÄ Pr√≥ximos passos:');
            console.log('1. Execute: npm start');
            console.log('2. Escolha m√©todo de conex√£o (QR ou c√≥digo)');
            console.log('3. Complete a autentica√ß√£o');
            console.log('\nüí° Dica: Se o pareamento por c√≥digo ainda n√£o funcionar,');
            console.log('   use o QR Code (op√ß√£o 1) que √© mais confi√°vel.');
        } else {
            console.log('\n‚ùå Erro ao remover sess√£o');
            process.exit(1);
        }
    } else {
        console.log('\n‚ùå Opera√ß√£o cancelada');
        console.log('A sess√£o atual foi mantida');
    }
});